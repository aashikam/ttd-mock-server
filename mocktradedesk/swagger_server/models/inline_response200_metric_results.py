# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse200MetricResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, insight_metric_type: str=None, range_start: float=None, range_end: float=None):  # noqa: E501
        """InlineResponse200MetricResults - a model defined in Swagger

        :param insight_metric_type: The insight_metric_type of this InlineResponse200MetricResults.  # noqa: E501
        :type insight_metric_type: str
        :param range_start: The range_start of this InlineResponse200MetricResults.  # noqa: E501
        :type range_start: float
        :param range_end: The range_end of this InlineResponse200MetricResults.  # noqa: E501
        :type range_end: float
        """
        self.swagger_types = {
            'insight_metric_type': str,
            'range_start': float,
            'range_end': float
        }

        self.attribute_map = {
            'insight_metric_type': 'InsightMetricType',
            'range_start': 'RangeStart',
            'range_end': 'RangeEnd'
        }
        self._insight_metric_type = insight_metric_type
        self._range_start = range_start
        self._range_end = range_end

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200MetricResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_MetricResults of this InlineResponse200MetricResults.  # noqa: E501
        :rtype: InlineResponse200MetricResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insight_metric_type(self) -> str:
        """Gets the insight_metric_type of this InlineResponse200MetricResults.

        The type of metric insight.  # noqa: E501

        :return: The insight_metric_type of this InlineResponse200MetricResults.
        :rtype: str
        """
        return self._insight_metric_type

    @insight_metric_type.setter
    def insight_metric_type(self, insight_metric_type: str):
        """Sets the insight_metric_type of this InlineResponse200MetricResults.

        The type of metric insight.  # noqa: E501

        :param insight_metric_type: The insight_metric_type of this InlineResponse200MetricResults.
        :type insight_metric_type: str
        """
        allowed_values = ["Impressions", "Spend", "Frequency", "Reach"]  # noqa: E501
        if insight_metric_type not in allowed_values:
            raise ValueError(
                "Invalid value for `insight_metric_type` ({0}), must be one of {1}"
                .format(insight_metric_type, allowed_values)
            )

        self._insight_metric_type = insight_metric_type

    @property
    def range_start(self) -> float:
        """Gets the range_start of this InlineResponse200MetricResults.


        :return: The range_start of this InlineResponse200MetricResults.
        :rtype: float
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start: float):
        """Sets the range_start of this InlineResponse200MetricResults.


        :param range_start: The range_start of this InlineResponse200MetricResults.
        :type range_start: float
        """

        self._range_start = range_start

    @property
    def range_end(self) -> float:
        """Gets the range_end of this InlineResponse200MetricResults.


        :return: The range_end of this InlineResponse200MetricResults.
        :rtype: float
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end: float):
        """Sets the range_end of this InlineResponse200MetricResults.


        :param range_end: The range_end of this InlineResponse200MetricResults.
        :type range_end: float
        """

        self._range_end = range_end
