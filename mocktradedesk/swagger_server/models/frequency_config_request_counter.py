# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FrequencyConfigRequestCounter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, counter_name: str=None, reset_interval_in_minutes: int=None, increment_by_all_entities_associated_with_bid_lists: bool=None):  # noqa: E501
        """FrequencyConfigRequestCounter - a model defined in Swagger

        :param counter_name: The counter_name of this FrequencyConfigRequestCounter.  # noqa: E501
        :type counter_name: str
        :param reset_interval_in_minutes: The reset_interval_in_minutes of this FrequencyConfigRequestCounter.  # noqa: E501
        :type reset_interval_in_minutes: int
        :param increment_by_all_entities_associated_with_bid_lists: The increment_by_all_entities_associated_with_bid_lists of this FrequencyConfigRequestCounter.  # noqa: E501
        :type increment_by_all_entities_associated_with_bid_lists: bool
        """
        self.swagger_types = {
            'counter_name': str,
            'reset_interval_in_minutes': int,
            'increment_by_all_entities_associated_with_bid_lists': bool
        }

        self.attribute_map = {
            'counter_name': 'CounterName',
            'reset_interval_in_minutes': 'ResetIntervalInMinutes',
            'increment_by_all_entities_associated_with_bid_lists': 'IncrementByAllEntitiesAssociatedWithBidLists'
        }
        self._counter_name = counter_name
        self._reset_interval_in_minutes = reset_interval_in_minutes
        self._increment_by_all_entities_associated_with_bid_lists = increment_by_all_entities_associated_with_bid_lists

    @classmethod
    def from_dict(cls, dikt) -> 'FrequencyConfigRequestCounter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FrequencyConfigRequest_Counter of this FrequencyConfigRequestCounter.  # noqa: E501
        :rtype: FrequencyConfigRequestCounter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counter_name(self) -> str:
        """Gets the counter_name of this FrequencyConfigRequestCounter.

        The counter name.  # noqa: E501

        :return: The counter_name of this FrequencyConfigRequestCounter.
        :rtype: str
        """
        return self._counter_name

    @counter_name.setter
    def counter_name(self, counter_name: str):
        """Sets the counter_name of this FrequencyConfigRequestCounter.

        The counter name.  # noqa: E501

        :param counter_name: The counter_name of this FrequencyConfigRequestCounter.
        :type counter_name: str
        """
        if counter_name is None:
            raise ValueError("Invalid value for `counter_name`, must not be `None`")  # noqa: E501

        self._counter_name = counter_name

    @property
    def reset_interval_in_minutes(self) -> int:
        """Gets the reset_interval_in_minutes of this FrequencyConfigRequestCounter.

        The time interval (in minutes) during which the counter tracks a user's frequency count.  # noqa: E501

        :return: The reset_interval_in_minutes of this FrequencyConfigRequestCounter.
        :rtype: int
        """
        return self._reset_interval_in_minutes

    @reset_interval_in_minutes.setter
    def reset_interval_in_minutes(self, reset_interval_in_minutes: int):
        """Sets the reset_interval_in_minutes of this FrequencyConfigRequestCounter.

        The time interval (in minutes) during which the counter tracks a user's frequency count.  # noqa: E501

        :param reset_interval_in_minutes: The reset_interval_in_minutes of this FrequencyConfigRequestCounter.
        :type reset_interval_in_minutes: int
        """
        if reset_interval_in_minutes is None:
            raise ValueError("Invalid value for `reset_interval_in_minutes`, must not be `None`")  # noqa: E501

        self._reset_interval_in_minutes = reset_interval_in_minutes

    @property
    def increment_by_all_entities_associated_with_bid_lists(self) -> bool:
        """Gets the increment_by_all_entities_associated_with_bid_lists of this FrequencyConfigRequestCounter.

        If true, ad groups, campaigns, and advertisers will be used as increments for this configuration.  # noqa: E501

        :return: The increment_by_all_entities_associated_with_bid_lists of this FrequencyConfigRequestCounter.
        :rtype: bool
        """
        return self._increment_by_all_entities_associated_with_bid_lists

    @increment_by_all_entities_associated_with_bid_lists.setter
    def increment_by_all_entities_associated_with_bid_lists(self, increment_by_all_entities_associated_with_bid_lists: bool):
        """Sets the increment_by_all_entities_associated_with_bid_lists of this FrequencyConfigRequestCounter.

        If true, ad groups, campaigns, and advertisers will be used as increments for this configuration.  # noqa: E501

        :param increment_by_all_entities_associated_with_bid_lists: The increment_by_all_entities_associated_with_bid_lists of this FrequencyConfigRequestCounter.
        :type increment_by_all_entities_associated_with_bid_lists: bool
        """

        self._increment_by_all_entities_associated_with_bid_lists = increment_by_all_entities_associated_with_bid_lists
