# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SellerQueryResponseResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, alias_to_seller_domain: str=None, is_targetable: bool=None, seller_domain: str=None, seller_domain_aliases: List[str]=None, seller_name: str=None, seller_status: str=None):  # noqa: E501
        """SellerQueryResponseResult - a model defined in Swagger

        :param alias_to_seller_domain: The alias_to_seller_domain of this SellerQueryResponseResult.  # noqa: E501
        :type alias_to_seller_domain: str
        :param is_targetable: The is_targetable of this SellerQueryResponseResult.  # noqa: E501
        :type is_targetable: bool
        :param seller_domain: The seller_domain of this SellerQueryResponseResult.  # noqa: E501
        :type seller_domain: str
        :param seller_domain_aliases: The seller_domain_aliases of this SellerQueryResponseResult.  # noqa: E501
        :type seller_domain_aliases: List[str]
        :param seller_name: The seller_name of this SellerQueryResponseResult.  # noqa: E501
        :type seller_name: str
        :param seller_status: The seller_status of this SellerQueryResponseResult.  # noqa: E501
        :type seller_status: str
        """
        self.swagger_types = {
            'alias_to_seller_domain': str,
            'is_targetable': bool,
            'seller_domain': str,
            'seller_domain_aliases': List[str],
            'seller_name': str,
            'seller_status': str
        }

        self.attribute_map = {
            'alias_to_seller_domain': 'AliasToSellerDomain',
            'is_targetable': 'IsTargetable',
            'seller_domain': 'SellerDomain',
            'seller_domain_aliases': 'SellerDomainAliases',
            'seller_name': 'SellerName',
            'seller_status': 'SellerStatus'
        }
        self._alias_to_seller_domain = alias_to_seller_domain
        self._is_targetable = is_targetable
        self._seller_domain = seller_domain
        self._seller_domain_aliases = seller_domain_aliases
        self._seller_name = seller_name
        self._seller_status = seller_status

    @classmethod
    def from_dict(cls, dikt) -> 'SellerQueryResponseResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SellerQueryResponse_Result of this SellerQueryResponseResult.  # noqa: E501
        :rtype: SellerQueryResponseResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_to_seller_domain(self) -> str:
        """Gets the alias_to_seller_domain of this SellerQueryResponseResult.

        If this domain is an alias to another seller, the root-level seller domain will be returned here.  # noqa: E501

        :return: The alias_to_seller_domain of this SellerQueryResponseResult.
        :rtype: str
        """
        return self._alias_to_seller_domain

    @alias_to_seller_domain.setter
    def alias_to_seller_domain(self, alias_to_seller_domain: str):
        """Sets the alias_to_seller_domain of this SellerQueryResponseResult.

        If this domain is an alias to another seller, the root-level seller domain will be returned here.  # noqa: E501

        :param alias_to_seller_domain: The alias_to_seller_domain of this SellerQueryResponseResult.
        :type alias_to_seller_domain: str
        """

        self._alias_to_seller_domain = alias_to_seller_domain

    @property
    def is_targetable(self) -> bool:
        """Gets the is_targetable of this SellerQueryResponseResult.

        Indicates whether this seller can be targeted in bid lines of a bid list.  # noqa: E501

        :return: The is_targetable of this SellerQueryResponseResult.
        :rtype: bool
        """
        return self._is_targetable

    @is_targetable.setter
    def is_targetable(self, is_targetable: bool):
        """Sets the is_targetable of this SellerQueryResponseResult.

        Indicates whether this seller can be targeted in bid lines of a bid list.  # noqa: E501

        :param is_targetable: The is_targetable of this SellerQueryResponseResult.
        :type is_targetable: bool
        """

        self._is_targetable = is_targetable

    @property
    def seller_domain(self) -> str:
        """Gets the seller_domain of this SellerQueryResponseResult.

        The domain of the seller.  # noqa: E501

        :return: The seller_domain of this SellerQueryResponseResult.
        :rtype: str
        """
        return self._seller_domain

    @seller_domain.setter
    def seller_domain(self, seller_domain: str):
        """Sets the seller_domain of this SellerQueryResponseResult.

        The domain of the seller.  # noqa: E501

        :param seller_domain: The seller_domain of this SellerQueryResponseResult.
        :type seller_domain: str
        """

        self._seller_domain = seller_domain

    @property
    def seller_domain_aliases(self) -> List[str]:
        """Gets the seller_domain_aliases of this SellerQueryResponseResult.

        A list of domains that are listed as aliases for this SellerDomain.  # noqa: E501

        :return: The seller_domain_aliases of this SellerQueryResponseResult.
        :rtype: List[str]
        """
        return self._seller_domain_aliases

    @seller_domain_aliases.setter
    def seller_domain_aliases(self, seller_domain_aliases: List[str]):
        """Sets the seller_domain_aliases of this SellerQueryResponseResult.

        A list of domains that are listed as aliases for this SellerDomain.  # noqa: E501

        :param seller_domain_aliases: The seller_domain_aliases of this SellerQueryResponseResult.
        :type seller_domain_aliases: List[str]
        """

        self._seller_domain_aliases = seller_domain_aliases

    @property
    def seller_name(self) -> str:
        """Gets the seller_name of this SellerQueryResponseResult.

        The name of the seller.  # noqa: E501

        :return: The seller_name of this SellerQueryResponseResult.
        :rtype: str
        """
        return self._seller_name

    @seller_name.setter
    def seller_name(self, seller_name: str):
        """Sets the seller_name of this SellerQueryResponseResult.

        The name of the seller.  # noqa: E501

        :param seller_name: The seller_name of this SellerQueryResponseResult.
        :type seller_name: str
        """

        self._seller_name = seller_name

    @property
    def seller_status(self) -> str:
        """Gets the seller_status of this SellerQueryResponseResult.

        The status indicating whether the seller is allowed to sell on our platform.  # noqa: E501

        :return: The seller_status of this SellerQueryResponseResult.
        :rtype: str
        """
        return self._seller_status

    @seller_status.setter
    def seller_status(self, seller_status: str):
        """Sets the seller_status of this SellerQueryResponseResult.

        The status indicating whether the seller is allowed to sell on our platform.  # noqa: E501

        :param seller_status: The seller_status of this SellerQueryResponseResult.
        :type seller_status: str
        """
        allowed_values = ["Allowed", "Disallowed"]  # noqa: E501
        if seller_status not in allowed_values:
            raise ValueError(
                "Invalid value for `seller_status` ({0}), must be one of {1}"
                .format(seller_status, allowed_values)
            )

        self._seller_status = seller_status
