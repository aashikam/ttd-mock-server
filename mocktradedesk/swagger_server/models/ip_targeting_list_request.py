# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ip_targeting_range import IPTargetingRange  # noqa: F401,E501
from swagger_server import util


class IPTargetingListRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, advertiser_id: str=None, ip_targeting_data_name: str=None, ip_targeting_ranges: List[IPTargetingRange]=None):  # noqa: E501
        """IPTargetingListRequest - a model defined in Swagger

        :param advertiser_id: The advertiser_id of this IPTargetingListRequest.  # noqa: E501
        :type advertiser_id: str
        :param ip_targeting_data_name: The ip_targeting_data_name of this IPTargetingListRequest.  # noqa: E501
        :type ip_targeting_data_name: str
        :param ip_targeting_ranges: The ip_targeting_ranges of this IPTargetingListRequest.  # noqa: E501
        :type ip_targeting_ranges: List[IPTargetingRange]
        """
        self.swagger_types = {
            'advertiser_id': str,
            'ip_targeting_data_name': str,
            'ip_targeting_ranges': List[IPTargetingRange]
        }

        self.attribute_map = {
            'advertiser_id': 'AdvertiserId',
            'ip_targeting_data_name': 'IPTargetingDataName',
            'ip_targeting_ranges': 'IPTargetingRanges'
        }
        self._advertiser_id = advertiser_id
        self._ip_targeting_data_name = ip_targeting_data_name
        self._ip_targeting_ranges = ip_targeting_ranges

    @classmethod
    def from_dict(cls, dikt) -> 'IPTargetingListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IPTargetingListRequest of this IPTargetingListRequest.  # noqa: E501
        :rtype: IPTargetingListRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self) -> str:
        """Gets the advertiser_id of this IPTargetingListRequest.

        The platform ID of the advertiser that owns this IP Targeting List.  # noqa: E501

        :return: The advertiser_id of this IPTargetingListRequest.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id: str):
        """Sets the advertiser_id of this IPTargetingListRequest.

        The platform ID of the advertiser that owns this IP Targeting List.  # noqa: E501

        :param advertiser_id: The advertiser_id of this IPTargetingListRequest.
        :type advertiser_id: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def ip_targeting_data_name(self) -> str:
        """Gets the ip_targeting_data_name of this IPTargetingListRequest.

        The name of the Data Element to create for users who are in the associated IP targeting ranges.  # noqa: E501

        :return: The ip_targeting_data_name of this IPTargetingListRequest.
        :rtype: str
        """
        return self._ip_targeting_data_name

    @ip_targeting_data_name.setter
    def ip_targeting_data_name(self, ip_targeting_data_name: str):
        """Sets the ip_targeting_data_name of this IPTargetingListRequest.

        The name of the Data Element to create for users who are in the associated IP targeting ranges.  # noqa: E501

        :param ip_targeting_data_name: The ip_targeting_data_name of this IPTargetingListRequest.
        :type ip_targeting_data_name: str
        """
        if ip_targeting_data_name is None:
            raise ValueError("Invalid value for `ip_targeting_data_name`, must not be `None`")  # noqa: E501

        self._ip_targeting_data_name = ip_targeting_data_name

    @property
    def ip_targeting_ranges(self) -> List[IPTargetingRange]:
        """Gets the ip_targeting_ranges of this IPTargetingListRequest.

        All the IP targeting ranges in this list.  # noqa: E501

        :return: The ip_targeting_ranges of this IPTargetingListRequest.
        :rtype: List[IPTargetingRange]
        """
        return self._ip_targeting_ranges

    @ip_targeting_ranges.setter
    def ip_targeting_ranges(self, ip_targeting_ranges: List[IPTargetingRange]):
        """Sets the ip_targeting_ranges of this IPTargetingListRequest.

        All the IP targeting ranges in this list.  # noqa: E501

        :param ip_targeting_ranges: The ip_targeting_ranges of this IPTargetingListRequest.
        :type ip_targeting_ranges: List[IPTargetingRange]
        """
        if ip_targeting_ranges is None:
            raise ValueError("Invalid value for `ip_targeting_ranges`, must not be `None`")  # noqa: E501

        self._ip_targeting_ranges = ip_targeting_ranges
