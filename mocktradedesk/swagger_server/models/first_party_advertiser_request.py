# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.first_party_advertiser_request_sort_fields import FirstPartyAdvertiserRequestSortFields  # noqa: F401,E501
from swagger_server import util


class FirstPartyAdvertiserRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, advertiser_id: str=None, page_size: int=None, page_start_index: int=None, data_types: List[str]=None, look_alike_model_build_statuses: List[str]=None, look_alike_model_eligibilities: List[str]=None, look_alike_model_result_statuses: List[str]=None, search_terms: List[str]=None, sort_fields: List[FirstPartyAdvertiserRequestSortFields]=None, unique_count_maximum: int=None, unique_count_minimum: int=None):  # noqa: E501
        """FirstPartyAdvertiserRequest - a model defined in Swagger

        :param advertiser_id: The advertiser_id of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type advertiser_id: str
        :param page_size: The page_size of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type page_size: int
        :param page_start_index: The page_start_index of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type page_start_index: int
        :param data_types: The data_types of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type data_types: List[str]
        :param look_alike_model_build_statuses: The look_alike_model_build_statuses of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type look_alike_model_build_statuses: List[str]
        :param look_alike_model_eligibilities: The look_alike_model_eligibilities of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type look_alike_model_eligibilities: List[str]
        :param look_alike_model_result_statuses: The look_alike_model_result_statuses of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type look_alike_model_result_statuses: List[str]
        :param search_terms: The search_terms of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type search_terms: List[str]
        :param sort_fields: The sort_fields of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type sort_fields: List[FirstPartyAdvertiserRequestSortFields]
        :param unique_count_maximum: The unique_count_maximum of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type unique_count_maximum: int
        :param unique_count_minimum: The unique_count_minimum of this FirstPartyAdvertiserRequest.  # noqa: E501
        :type unique_count_minimum: int
        """
        self.swagger_types = {
            'advertiser_id': str,
            'page_size': int,
            'page_start_index': int,
            'data_types': List[str],
            'look_alike_model_build_statuses': List[str],
            'look_alike_model_eligibilities': List[str],
            'look_alike_model_result_statuses': List[str],
            'search_terms': List[str],
            'sort_fields': List[FirstPartyAdvertiserRequestSortFields],
            'unique_count_maximum': int,
            'unique_count_minimum': int
        }

        self.attribute_map = {
            'advertiser_id': 'AdvertiserId',
            'page_size': 'PageSize',
            'page_start_index': 'PageStartIndex',
            'data_types': 'DataTypes',
            'look_alike_model_build_statuses': 'LookAlikeModelBuildStatuses',
            'look_alike_model_eligibilities': 'LookAlikeModelEligibilities',
            'look_alike_model_result_statuses': 'LookAlikeModelResultStatuses',
            'search_terms': 'SearchTerms',
            'sort_fields': 'SortFields',
            'unique_count_maximum': 'UniqueCountMaximum',
            'unique_count_minimum': 'UniqueCountMinimum'
        }
        self._advertiser_id = advertiser_id
        self._page_size = page_size
        self._page_start_index = page_start_index
        self._data_types = data_types
        self._look_alike_model_build_statuses = look_alike_model_build_statuses
        self._look_alike_model_eligibilities = look_alike_model_eligibilities
        self._look_alike_model_result_statuses = look_alike_model_result_statuses
        self._search_terms = search_terms
        self._sort_fields = sort_fields
        self._unique_count_maximum = unique_count_maximum
        self._unique_count_minimum = unique_count_minimum

    @classmethod
    def from_dict(cls, dikt) -> 'FirstPartyAdvertiserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FirstPartyAdvertiserRequest of this FirstPartyAdvertiserRequest.  # noqa: E501
        :rtype: FirstPartyAdvertiserRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self) -> str:
        """Gets the advertiser_id of this FirstPartyAdvertiserRequest.

        The platform ID of the advertiser making the query.  # noqa: E501

        :return: The advertiser_id of this FirstPartyAdvertiserRequest.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id: str):
        """Sets the advertiser_id of this FirstPartyAdvertiserRequest.

        The platform ID of the advertiser making the query.  # noqa: E501

        :param advertiser_id: The advertiser_id of this FirstPartyAdvertiserRequest.
        :type advertiser_id: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def page_size(self) -> int:
        """Gets the page_size of this FirstPartyAdvertiserRequest.

        The number of results to return per page.  # noqa: E501

        :return: The page_size of this FirstPartyAdvertiserRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size: int):
        """Sets the page_size of this FirstPartyAdvertiserRequest.

        The number of results to return per page.  # noqa: E501

        :param page_size: The page_size of this FirstPartyAdvertiserRequest.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def page_start_index(self) -> int:
        """Gets the page_start_index of this FirstPartyAdvertiserRequest.

        The index at which to start the page of results.  # noqa: E501

        :return: The page_start_index of this FirstPartyAdvertiserRequest.
        :rtype: int
        """
        return self._page_start_index

    @page_start_index.setter
    def page_start_index(self, page_start_index: int):
        """Sets the page_start_index of this FirstPartyAdvertiserRequest.

        The index at which to start the page of results.  # noqa: E501

        :param page_start_index: The page_start_index of this FirstPartyAdvertiserRequest.
        :type page_start_index: int
        """
        if page_start_index is None:
            raise ValueError("Invalid value for `page_start_index`, must not be `None`")  # noqa: E501

        self._page_start_index = page_start_index

    @property
    def data_types(self) -> List[str]:
        """Gets the data_types of this FirstPartyAdvertiserRequest.

        The types of First Party Data to return.  # noqa: E501

        :return: The data_types of this FirstPartyAdvertiserRequest.
        :rtype: List[str]
        """
        return self._data_types

    @data_types.setter
    def data_types(self, data_types: List[str]):
        """Sets the data_types of this FirstPartyAdvertiserRequest.

        The types of First Party Data to return.  # noqa: E501

        :param data_types: The data_types of this FirstPartyAdvertiserRequest.
        :type data_types: List[str]
        """
        allowed_values = ["Keyword", "TrackingTag", "IPAddressRange", "ImportedAdvertiserData", "ImportedAdvertiserDataWithBaseBid", "HouseholdExtension", "ClickRetargeting", "DirectIPTargeting", "PlayerEventStart", "PlayerEventMidpoint", "PlayerEventComplete", "ThirdPartyImpression", "FixedPriceUser", "CrmData"]  # noqa: E501
        if not set(data_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `data_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(data_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._data_types = data_types

    @property
    def look_alike_model_build_statuses(self) -> List[str]:
        """Gets the look_alike_model_build_statuses of this FirstPartyAdvertiserRequest.


        :return: The look_alike_model_build_statuses of this FirstPartyAdvertiserRequest.
        :rtype: List[str]
        """
        return self._look_alike_model_build_statuses

    @look_alike_model_build_statuses.setter
    def look_alike_model_build_statuses(self, look_alike_model_build_statuses: List[str]):
        """Sets the look_alike_model_build_statuses of this FirstPartyAdvertiserRequest.


        :param look_alike_model_build_statuses: The look_alike_model_build_statuses of this FirstPartyAdvertiserRequest.
        :type look_alike_model_build_statuses: List[str]
        """
        allowed_values = ["NotRequested", "Queued", "Built"]  # noqa: E501
        if not set(look_alike_model_build_statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `look_alike_model_build_statuses` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(look_alike_model_build_statuses) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._look_alike_model_build_statuses = look_alike_model_build_statuses

    @property
    def look_alike_model_eligibilities(self) -> List[str]:
        """Gets the look_alike_model_eligibilities of this FirstPartyAdvertiserRequest.


        :return: The look_alike_model_eligibilities of this FirstPartyAdvertiserRequest.
        :rtype: List[str]
        """
        return self._look_alike_model_eligibilities

    @look_alike_model_eligibilities.setter
    def look_alike_model_eligibilities(self, look_alike_model_eligibilities: List[str]):
        """Sets the look_alike_model_eligibilities of this FirstPartyAdvertiserRequest.


        :param look_alike_model_eligibilities: The look_alike_model_eligibilities of this FirstPartyAdvertiserRequest.
        :type look_alike_model_eligibilities: List[str]
        """
        allowed_values = ["Eligible", "NotEligible"]  # noqa: E501
        if not set(look_alike_model_eligibilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `look_alike_model_eligibilities` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(look_alike_model_eligibilities) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._look_alike_model_eligibilities = look_alike_model_eligibilities

    @property
    def look_alike_model_result_statuses(self) -> List[str]:
        """Gets the look_alike_model_result_statuses of this FirstPartyAdvertiserRequest.


        :return: The look_alike_model_result_statuses of this FirstPartyAdvertiserRequest.
        :rtype: List[str]
        """
        return self._look_alike_model_result_statuses

    @look_alike_model_result_statuses.setter
    def look_alike_model_result_statuses(self, look_alike_model_result_statuses: List[str]):
        """Sets the look_alike_model_result_statuses of this FirstPartyAdvertiserRequest.


        :param look_alike_model_result_statuses: The look_alike_model_result_statuses of this FirstPartyAdvertiserRequest.
        :type look_alike_model_result_statuses: List[str]
        """
        allowed_values = ["NoResults", "Ready"]  # noqa: E501
        if not set(look_alike_model_result_statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `look_alike_model_result_statuses` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(look_alike_model_result_statuses) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._look_alike_model_result_statuses = look_alike_model_result_statuses

    @property
    def search_terms(self) -> List[str]:
        """Gets the search_terms of this FirstPartyAdvertiserRequest.


        :return: The search_terms of this FirstPartyAdvertiserRequest.
        :rtype: List[str]
        """
        return self._search_terms

    @search_terms.setter
    def search_terms(self, search_terms: List[str]):
        """Sets the search_terms of this FirstPartyAdvertiserRequest.


        :param search_terms: The search_terms of this FirstPartyAdvertiserRequest.
        :type search_terms: List[str]
        """

        self._search_terms = search_terms

    @property
    def sort_fields(self) -> List[FirstPartyAdvertiserRequestSortFields]:
        """Gets the sort_fields of this FirstPartyAdvertiserRequest.


        :return: The sort_fields of this FirstPartyAdvertiserRequest.
        :rtype: List[FirstPartyAdvertiserRequestSortFields]
        """
        return self._sort_fields

    @sort_fields.setter
    def sort_fields(self, sort_fields: List[FirstPartyAdvertiserRequestSortFields]):
        """Sets the sort_fields of this FirstPartyAdvertiserRequest.


        :param sort_fields: The sort_fields of this FirstPartyAdvertiserRequest.
        :type sort_fields: List[FirstPartyAdvertiserRequestSortFields]
        """

        self._sort_fields = sort_fields

    @property
    def unique_count_maximum(self) -> int:
        """Gets the unique_count_maximum of this FirstPartyAdvertiserRequest.


        :return: The unique_count_maximum of this FirstPartyAdvertiserRequest.
        :rtype: int
        """
        return self._unique_count_maximum

    @unique_count_maximum.setter
    def unique_count_maximum(self, unique_count_maximum: int):
        """Sets the unique_count_maximum of this FirstPartyAdvertiserRequest.


        :param unique_count_maximum: The unique_count_maximum of this FirstPartyAdvertiserRequest.
        :type unique_count_maximum: int
        """

        self._unique_count_maximum = unique_count_maximum

    @property
    def unique_count_minimum(self) -> int:
        """Gets the unique_count_minimum of this FirstPartyAdvertiserRequest.


        :return: The unique_count_minimum of this FirstPartyAdvertiserRequest.
        :rtype: int
        """
        return self._unique_count_minimum

    @unique_count_minimum.setter
    def unique_count_minimum(self, unique_count_minimum: int):
        """Sets the unique_count_minimum of this FirstPartyAdvertiserRequest.


        :param unique_count_minimum: The unique_count_minimum of this FirstPartyAdvertiserRequest.
        :type unique_count_minimum: int
        """

        self._unique_count_minimum = unique_count_minimum
