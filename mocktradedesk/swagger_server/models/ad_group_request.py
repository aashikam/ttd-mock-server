# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ad_group_request_budget_settings import AdGroupRequestBudgetSettings  # noqa: F401,E501
from swagger_server import util


class AdGroupRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ad_group_name: str=None, campaign_id: str=None, budget_settings: AdGroupRequestBudgetSettings=None, pacing_mode: str=None, is_enabled: bool=False, creative_ids: List[str]=None):  # noqa: E501
        """AdGroupRequest - a model defined in Swagger

        :param ad_group_name: The ad_group_name of this AdGroupRequest.  # noqa: E501
        :type ad_group_name: str
        :param campaign_id: The campaign_id of this AdGroupRequest.  # noqa: E501
        :type campaign_id: str
        :param budget_settings: The budget_settings of this AdGroupRequest.  # noqa: E501
        :type budget_settings: AdGroupRequestBudgetSettings
        :param pacing_mode: The pacing_mode of this AdGroupRequest.  # noqa: E501
        :type pacing_mode: str
        :param is_enabled: The is_enabled of this AdGroupRequest.  # noqa: E501
        :type is_enabled: bool
        :param creative_ids: The creative_ids of this AdGroupRequest.  # noqa: E501
        :type creative_ids: List[str]
        """
        self.swagger_types = {
            'ad_group_name': str,
            'campaign_id': str,
            'budget_settings': AdGroupRequestBudgetSettings,
            'pacing_mode': str,
            'is_enabled': bool,
            'creative_ids': List[str]
        }

        self.attribute_map = {
            'ad_group_name': 'AdGroupName',
            'campaign_id': 'CampaignId',
            'budget_settings': 'BudgetSettings',
            'pacing_mode': 'PacingMode',
            'is_enabled': 'IsEnabled',
            'creative_ids': 'CreativeIds'
        }
        self._ad_group_name = ad_group_name
        self._campaign_id = campaign_id
        self._budget_settings = budget_settings
        self._pacing_mode = pacing_mode
        self._is_enabled = is_enabled
        self._creative_ids = creative_ids

    @classmethod
    def from_dict(cls, dikt) -> 'AdGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdGroupRequest of this AdGroupRequest.  # noqa: E501
        :rtype: AdGroupRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_group_name(self) -> str:
        """Gets the ad_group_name of this AdGroupRequest.

        The name of the Ad Group.  # noqa: E501

        :return: The ad_group_name of this AdGroupRequest.
        :rtype: str
        """
        return self._ad_group_name

    @ad_group_name.setter
    def ad_group_name(self, ad_group_name: str):
        """Sets the ad_group_name of this AdGroupRequest.

        The name of the Ad Group.  # noqa: E501

        :param ad_group_name: The ad_group_name of this AdGroupRequest.
        :type ad_group_name: str
        """
        if ad_group_name is None:
            raise ValueError("Invalid value for `ad_group_name`, must not be `None`")  # noqa: E501

        self._ad_group_name = ad_group_name

    @property
    def campaign_id(self) -> str:
        """Gets the campaign_id of this AdGroupRequest.

        The ID of the Campaign that owns this Ad Group.  # noqa: E501

        :return: The campaign_id of this AdGroupRequest.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id: str):
        """Sets the campaign_id of this AdGroupRequest.

        The ID of the Campaign that owns this Ad Group.  # noqa: E501

        :param campaign_id: The campaign_id of this AdGroupRequest.
        :type campaign_id: str
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def budget_settings(self) -> AdGroupRequestBudgetSettings:
        """Gets the budget_settings of this AdGroupRequest.


        :return: The budget_settings of this AdGroupRequest.
        :rtype: AdGroupRequestBudgetSettings
        """
        return self._budget_settings

    @budget_settings.setter
    def budget_settings(self, budget_settings: AdGroupRequestBudgetSettings):
        """Sets the budget_settings of this AdGroupRequest.


        :param budget_settings: The budget_settings of this AdGroupRequest.
        :type budget_settings: AdGroupRequestBudgetSettings
        """
        if budget_settings is None:
            raise ValueError("Invalid value for `budget_settings`, must not be `None`")  # noqa: E501

        self._budget_settings = budget_settings

    @property
    def pacing_mode(self) -> str:
        """Gets the pacing_mode of this AdGroupRequest.

        The pacing mode for the Ad Group.  # noqa: E501

        :return: The pacing_mode of this AdGroupRequest.
        :rtype: str
        """
        return self._pacing_mode

    @pacing_mode.setter
    def pacing_mode(self, pacing_mode: str):
        """Sets the pacing_mode of this AdGroupRequest.

        The pacing mode for the Ad Group.  # noqa: E501

        :param pacing_mode: The pacing_mode of this AdGroupRequest.
        :type pacing_mode: str
        """
        allowed_values = ["PaceToEndOfDay", "Off", "PaceToEndOfFlight", "PaceAhead"]  # noqa: E501
        if pacing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `pacing_mode` ({0}), must be one of {1}"
                .format(pacing_mode, allowed_values)
            )

        self._pacing_mode = pacing_mode

    @property
    def is_enabled(self) -> bool:
        """Gets the is_enabled of this AdGroupRequest.

        Whether the Ad Group is enabled to spend.  # noqa: E501

        :return: The is_enabled of this AdGroupRequest.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled: bool):
        """Sets the is_enabled of this AdGroupRequest.

        Whether the Ad Group is enabled to spend.  # noqa: E501

        :param is_enabled: The is_enabled of this AdGroupRequest.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def creative_ids(self) -> List[str]:
        """Gets the creative_ids of this AdGroupRequest.

        A list of Creative IDs associated with this Ad Group.  # noqa: E501

        :return: The creative_ids of this AdGroupRequest.
        :rtype: List[str]
        """
        return self._creative_ids

    @creative_ids.setter
    def creative_ids(self, creative_ids: List[str]):
        """Sets the creative_ids of this AdGroupRequest.

        A list of Creative IDs associated with this Ad Group.  # noqa: E501

        :param creative_ids: The creative_ids of this AdGroupRequest.
        :type creative_ids: List[str]
        """

        self._creative_ids = creative_ids
