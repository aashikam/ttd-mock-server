# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AdGroupRequestBudgetSettings(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, budget_in_advertiser_currency: float=None, daily_target_in_advertiser_currency: float=None):  # noqa: E501
        """AdGroupRequestBudgetSettings - a model defined in Swagger

        :param budget_in_advertiser_currency: The budget_in_advertiser_currency of this AdGroupRequestBudgetSettings.  # noqa: E501
        :type budget_in_advertiser_currency: float
        :param daily_target_in_advertiser_currency: The daily_target_in_advertiser_currency of this AdGroupRequestBudgetSettings.  # noqa: E501
        :type daily_target_in_advertiser_currency: float
        """
        self.swagger_types = {
            'budget_in_advertiser_currency': float,
            'daily_target_in_advertiser_currency': float
        }

        self.attribute_map = {
            'budget_in_advertiser_currency': 'BudgetInAdvertiserCurrency',
            'daily_target_in_advertiser_currency': 'DailyTargetInAdvertiserCurrency'
        }
        self._budget_in_advertiser_currency = budget_in_advertiser_currency
        self._daily_target_in_advertiser_currency = daily_target_in_advertiser_currency

    @classmethod
    def from_dict(cls, dikt) -> 'AdGroupRequestBudgetSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdGroupRequest_BudgetSettings of this AdGroupRequestBudgetSettings.  # noqa: E501
        :rtype: AdGroupRequestBudgetSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget_in_advertiser_currency(self) -> float:
        """Gets the budget_in_advertiser_currency of this AdGroupRequestBudgetSettings.

        The total amount the Ad Group may spend in the advertiser's currency.  # noqa: E501

        :return: The budget_in_advertiser_currency of this AdGroupRequestBudgetSettings.
        :rtype: float
        """
        return self._budget_in_advertiser_currency

    @budget_in_advertiser_currency.setter
    def budget_in_advertiser_currency(self, budget_in_advertiser_currency: float):
        """Sets the budget_in_advertiser_currency of this AdGroupRequestBudgetSettings.

        The total amount the Ad Group may spend in the advertiser's currency.  # noqa: E501

        :param budget_in_advertiser_currency: The budget_in_advertiser_currency of this AdGroupRequestBudgetSettings.
        :type budget_in_advertiser_currency: float
        """
        if budget_in_advertiser_currency is None:
            raise ValueError("Invalid value for `budget_in_advertiser_currency`, must not be `None`")  # noqa: E501

        self._budget_in_advertiser_currency = budget_in_advertiser_currency

    @property
    def daily_target_in_advertiser_currency(self) -> float:
        """Gets the daily_target_in_advertiser_currency of this AdGroupRequestBudgetSettings.

        The daily spending limit for the Ad Group.  # noqa: E501

        :return: The daily_target_in_advertiser_currency of this AdGroupRequestBudgetSettings.
        :rtype: float
        """
        return self._daily_target_in_advertiser_currency

    @daily_target_in_advertiser_currency.setter
    def daily_target_in_advertiser_currency(self, daily_target_in_advertiser_currency: float):
        """Sets the daily_target_in_advertiser_currency of this AdGroupRequestBudgetSettings.

        The daily spending limit for the Ad Group.  # noqa: E501

        :param daily_target_in_advertiser_currency: The daily_target_in_advertiser_currency of this AdGroupRequestBudgetSettings.
        :type daily_target_in_advertiser_currency: float
        """

        self._daily_target_in_advertiser_currency = daily_target_in_advertiser_currency
