# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AdvertiserRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, advertiser_name: str=None, attribution_click_lookback_window_in_seconds: int=None, attribution_impression_lookback_window_in_seconds: int=None, click_dedup_window_in_seconds: int=None, conversion_dedup_window_in_seconds: int=None, default_right_media_offer_type_id: int=None, domain_address: str=None, partner_id: str=None):  # noqa: E501
        """AdvertiserRequest - a model defined in Swagger

        :param advertiser_name: The advertiser_name of this AdvertiserRequest.  # noqa: E501
        :type advertiser_name: str
        :param attribution_click_lookback_window_in_seconds: The attribution_click_lookback_window_in_seconds of this AdvertiserRequest.  # noqa: E501
        :type attribution_click_lookback_window_in_seconds: int
        :param attribution_impression_lookback_window_in_seconds: The attribution_impression_lookback_window_in_seconds of this AdvertiserRequest.  # noqa: E501
        :type attribution_impression_lookback_window_in_seconds: int
        :param click_dedup_window_in_seconds: The click_dedup_window_in_seconds of this AdvertiserRequest.  # noqa: E501
        :type click_dedup_window_in_seconds: int
        :param conversion_dedup_window_in_seconds: The conversion_dedup_window_in_seconds of this AdvertiserRequest.  # noqa: E501
        :type conversion_dedup_window_in_seconds: int
        :param default_right_media_offer_type_id: The default_right_media_offer_type_id of this AdvertiserRequest.  # noqa: E501
        :type default_right_media_offer_type_id: int
        :param domain_address: The domain_address of this AdvertiserRequest.  # noqa: E501
        :type domain_address: str
        :param partner_id: The partner_id of this AdvertiserRequest.  # noqa: E501
        :type partner_id: str
        """
        self.swagger_types = {
            'advertiser_name': str,
            'attribution_click_lookback_window_in_seconds': int,
            'attribution_impression_lookback_window_in_seconds': int,
            'click_dedup_window_in_seconds': int,
            'conversion_dedup_window_in_seconds': int,
            'default_right_media_offer_type_id': int,
            'domain_address': str,
            'partner_id': str
        }

        self.attribute_map = {
            'advertiser_name': 'AdvertiserName',
            'attribution_click_lookback_window_in_seconds': 'AttributionClickLookbackWindowInSeconds',
            'attribution_impression_lookback_window_in_seconds': 'AttributionImpressionLookbackWindowInSeconds',
            'click_dedup_window_in_seconds': 'ClickDedupWindowInSeconds',
            'conversion_dedup_window_in_seconds': 'ConversionDedupWindowInSeconds',
            'default_right_media_offer_type_id': 'DefaultRightMediaOfferTypeId',
            'domain_address': 'DomainAddress',
            'partner_id': 'PartnerId'
        }
        self._advertiser_name = advertiser_name
        self._attribution_click_lookback_window_in_seconds = attribution_click_lookback_window_in_seconds
        self._attribution_impression_lookback_window_in_seconds = attribution_impression_lookback_window_in_seconds
        self._click_dedup_window_in_seconds = click_dedup_window_in_seconds
        self._conversion_dedup_window_in_seconds = conversion_dedup_window_in_seconds
        self._default_right_media_offer_type_id = default_right_media_offer_type_id
        self._domain_address = domain_address
        self._partner_id = partner_id

    @classmethod
    def from_dict(cls, dikt) -> 'AdvertiserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdvertiserRequest of this AdvertiserRequest.  # noqa: E501
        :rtype: AdvertiserRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_name(self) -> str:
        """Gets the advertiser_name of this AdvertiserRequest.

        The name of the advertiser.  # noqa: E501

        :return: The advertiser_name of this AdvertiserRequest.
        :rtype: str
        """
        return self._advertiser_name

    @advertiser_name.setter
    def advertiser_name(self, advertiser_name: str):
        """Sets the advertiser_name of this AdvertiserRequest.

        The name of the advertiser.  # noqa: E501

        :param advertiser_name: The advertiser_name of this AdvertiserRequest.
        :type advertiser_name: str
        """
        if advertiser_name is None:
            raise ValueError("Invalid value for `advertiser_name`, must not be `None`")  # noqa: E501

        self._advertiser_name = advertiser_name

    @property
    def attribution_click_lookback_window_in_seconds(self) -> int:
        """Gets the attribution_click_lookback_window_in_seconds of this AdvertiserRequest.

        Time window for click attribution in seconds.  # noqa: E501

        :return: The attribution_click_lookback_window_in_seconds of this AdvertiserRequest.
        :rtype: int
        """
        return self._attribution_click_lookback_window_in_seconds

    @attribution_click_lookback_window_in_seconds.setter
    def attribution_click_lookback_window_in_seconds(self, attribution_click_lookback_window_in_seconds: int):
        """Sets the attribution_click_lookback_window_in_seconds of this AdvertiserRequest.

        Time window for click attribution in seconds.  # noqa: E501

        :param attribution_click_lookback_window_in_seconds: The attribution_click_lookback_window_in_seconds of this AdvertiserRequest.
        :type attribution_click_lookback_window_in_seconds: int
        """
        if attribution_click_lookback_window_in_seconds is None:
            raise ValueError("Invalid value for `attribution_click_lookback_window_in_seconds`, must not be `None`")  # noqa: E501

        self._attribution_click_lookback_window_in_seconds = attribution_click_lookback_window_in_seconds

    @property
    def attribution_impression_lookback_window_in_seconds(self) -> int:
        """Gets the attribution_impression_lookback_window_in_seconds of this AdvertiserRequest.

        Time window for impression attribution in seconds.  # noqa: E501

        :return: The attribution_impression_lookback_window_in_seconds of this AdvertiserRequest.
        :rtype: int
        """
        return self._attribution_impression_lookback_window_in_seconds

    @attribution_impression_lookback_window_in_seconds.setter
    def attribution_impression_lookback_window_in_seconds(self, attribution_impression_lookback_window_in_seconds: int):
        """Sets the attribution_impression_lookback_window_in_seconds of this AdvertiserRequest.

        Time window for impression attribution in seconds.  # noqa: E501

        :param attribution_impression_lookback_window_in_seconds: The attribution_impression_lookback_window_in_seconds of this AdvertiserRequest.
        :type attribution_impression_lookback_window_in_seconds: int
        """
        if attribution_impression_lookback_window_in_seconds is None:
            raise ValueError("Invalid value for `attribution_impression_lookback_window_in_seconds`, must not be `None`")  # noqa: E501

        self._attribution_impression_lookback_window_in_seconds = attribution_impression_lookback_window_in_seconds

    @property
    def click_dedup_window_in_seconds(self) -> int:
        """Gets the click_dedup_window_in_seconds of this AdvertiserRequest.

        Window for de-duplicating similar clicks.  # noqa: E501

        :return: The click_dedup_window_in_seconds of this AdvertiserRequest.
        :rtype: int
        """
        return self._click_dedup_window_in_seconds

    @click_dedup_window_in_seconds.setter
    def click_dedup_window_in_seconds(self, click_dedup_window_in_seconds: int):
        """Sets the click_dedup_window_in_seconds of this AdvertiserRequest.

        Window for de-duplicating similar clicks.  # noqa: E501

        :param click_dedup_window_in_seconds: The click_dedup_window_in_seconds of this AdvertiserRequest.
        :type click_dedup_window_in_seconds: int
        """
        if click_dedup_window_in_seconds is None:
            raise ValueError("Invalid value for `click_dedup_window_in_seconds`, must not be `None`")  # noqa: E501

        self._click_dedup_window_in_seconds = click_dedup_window_in_seconds

    @property
    def conversion_dedup_window_in_seconds(self) -> int:
        """Gets the conversion_dedup_window_in_seconds of this AdvertiserRequest.

        Window for de-duplicating similar conversions.  # noqa: E501

        :return: The conversion_dedup_window_in_seconds of this AdvertiserRequest.
        :rtype: int
        """
        return self._conversion_dedup_window_in_seconds

    @conversion_dedup_window_in_seconds.setter
    def conversion_dedup_window_in_seconds(self, conversion_dedup_window_in_seconds: int):
        """Sets the conversion_dedup_window_in_seconds of this AdvertiserRequest.

        Window for de-duplicating similar conversions.  # noqa: E501

        :param conversion_dedup_window_in_seconds: The conversion_dedup_window_in_seconds of this AdvertiserRequest.
        :type conversion_dedup_window_in_seconds: int
        """
        if conversion_dedup_window_in_seconds is None:
            raise ValueError("Invalid value for `conversion_dedup_window_in_seconds`, must not be `None`")  # noqa: E501

        self._conversion_dedup_window_in_seconds = conversion_dedup_window_in_seconds

    @property
    def default_right_media_offer_type_id(self) -> int:
        """Gets the default_right_media_offer_type_id of this AdvertiserRequest.

        Default Right Media Offer Type ID.  # noqa: E501

        :return: The default_right_media_offer_type_id of this AdvertiserRequest.
        :rtype: int
        """
        return self._default_right_media_offer_type_id

    @default_right_media_offer_type_id.setter
    def default_right_media_offer_type_id(self, default_right_media_offer_type_id: int):
        """Sets the default_right_media_offer_type_id of this AdvertiserRequest.

        Default Right Media Offer Type ID.  # noqa: E501

        :param default_right_media_offer_type_id: The default_right_media_offer_type_id of this AdvertiserRequest.
        :type default_right_media_offer_type_id: int
        """
        if default_right_media_offer_type_id is None:
            raise ValueError("Invalid value for `default_right_media_offer_type_id`, must not be `None`")  # noqa: E501

        self._default_right_media_offer_type_id = default_right_media_offer_type_id

    @property
    def domain_address(self) -> str:
        """Gets the domain_address of this AdvertiserRequest.

        The domain address for the advertiser.  # noqa: E501

        :return: The domain_address of this AdvertiserRequest.
        :rtype: str
        """
        return self._domain_address

    @domain_address.setter
    def domain_address(self, domain_address: str):
        """Sets the domain_address of this AdvertiserRequest.

        The domain address for the advertiser.  # noqa: E501

        :param domain_address: The domain_address of this AdvertiserRequest.
        :type domain_address: str
        """
        if domain_address is None:
            raise ValueError("Invalid value for `domain_address`, must not be `None`")  # noqa: E501

        self._domain_address = domain_address

    @property
    def partner_id(self) -> str:
        """Gets the partner_id of this AdvertiserRequest.

        The ID of the partner who owns this advertiser.  # noqa: E501

        :return: The partner_id of this AdvertiserRequest.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id: str):
        """Sets the partner_id of this AdvertiserRequest.

        The ID of the partner who owns this advertiser.  # noqa: E501

        :param partner_id: The partner_id of this AdvertiserRequest.
        :type partner_id: str
        """
        if partner_id is None:
            raise ValueError("Invalid value for `partner_id`, must not be `None`")  # noqa: E501

        self._partner_id = partner_id
