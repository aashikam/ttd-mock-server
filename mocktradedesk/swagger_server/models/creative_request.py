# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CreativeRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, advertiser_id: str=None, creative_name: str=None, availability: str=None, description: str=None, clickthrough_url: str=None):  # noqa: E501
        """CreativeRequest - a model defined in Swagger

        :param advertiser_id: The advertiser_id of this CreativeRequest.  # noqa: E501
        :type advertiser_id: str
        :param creative_name: The creative_name of this CreativeRequest.  # noqa: E501
        :type creative_name: str
        :param availability: The availability of this CreativeRequest.  # noqa: E501
        :type availability: str
        :param description: The description of this CreativeRequest.  # noqa: E501
        :type description: str
        :param clickthrough_url: The clickthrough_url of this CreativeRequest.  # noqa: E501
        :type clickthrough_url: str
        """
        self.swagger_types = {
            'advertiser_id': str,
            'creative_name': str,
            'availability': str,
            'description': str,
            'clickthrough_url': str
        }

        self.attribute_map = {
            'advertiser_id': 'AdvertiserId',
            'creative_name': 'CreativeName',
            'availability': 'Availability',
            'description': 'Description',
            'clickthrough_url': 'ClickthroughUrl'
        }
        self._advertiser_id = advertiser_id
        self._creative_name = creative_name
        self._availability = availability
        self._description = description
        self._clickthrough_url = clickthrough_url

    @classmethod
    def from_dict(cls, dikt) -> 'CreativeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreativeRequest of this CreativeRequest.  # noqa: E501
        :rtype: CreativeRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self) -> str:
        """Gets the advertiser_id of this CreativeRequest.

        The platform ID of the advertiser that owns this creative.  # noqa: E501

        :return: The advertiser_id of this CreativeRequest.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id: str):
        """Sets the advertiser_id of this CreativeRequest.

        The platform ID of the advertiser that owns this creative.  # noqa: E501

        :param advertiser_id: The advertiser_id of this CreativeRequest.
        :type advertiser_id: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def creative_name(self) -> str:
        """Gets the creative_name of this CreativeRequest.

        The name of the creative. The value must not contain special characters like <>;^\\r\\n. Max length is 256.  # noqa: E501

        :return: The creative_name of this CreativeRequest.
        :rtype: str
        """
        return self._creative_name

    @creative_name.setter
    def creative_name(self, creative_name: str):
        """Sets the creative_name of this CreativeRequest.

        The name of the creative. The value must not contain special characters like <>;^\\r\\n. Max length is 256.  # noqa: E501

        :param creative_name: The creative_name of this CreativeRequest.
        :type creative_name: str
        """
        if creative_name is None:
            raise ValueError("Invalid value for `creative_name`, must not be `None`")  # noqa: E501

        self._creative_name = creative_name

    @property
    def availability(self) -> str:
        """Gets the availability of this CreativeRequest.

        Indicates if the Creative is 'Available' for use or 'Archived'. 'Archived' creatives are hidden and associations removed.  # noqa: E501

        :return: The availability of this CreativeRequest.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability: str):
        """Sets the availability of this CreativeRequest.

        Indicates if the Creative is 'Available' for use or 'Archived'. 'Archived' creatives are hidden and associations removed.  # noqa: E501

        :param availability: The availability of this CreativeRequest.
        :type availability: str
        """
        allowed_values = ["Available", "Archived"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def description(self) -> str:
        """Gets the description of this CreativeRequest.

        An optional description of the creative. Max length is 512.  # noqa: E501

        :return: The description of this CreativeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CreativeRequest.

        An optional description of the creative. Max length is 512.  # noqa: E501

        :param description: The description of this CreativeRequest.
        :type description: str
        """

        self._description = description

    @property
    def clickthrough_url(self) -> str:
        """Gets the clickthrough_url of this CreativeRequest.

        The URL to invoke when the user clicks the ad. This may include click tracking. Max length is 5000.  # noqa: E501

        :return: The clickthrough_url of this CreativeRequest.
        :rtype: str
        """
        return self._clickthrough_url

    @clickthrough_url.setter
    def clickthrough_url(self, clickthrough_url: str):
        """Sets the clickthrough_url of this CreativeRequest.

        The URL to invoke when the user clicks the ad. This may include click tracking. Max length is 5000.  # noqa: E501

        :param clickthrough_url: The clickthrough_url of this CreativeRequest.
        :type clickthrough_url: str
        """
        if clickthrough_url is None:
            raise ValueError("Invalid value for `clickthrough_url`, must not be `None`")  # noqa: E501

        self._clickthrough_url = clickthrough_url
