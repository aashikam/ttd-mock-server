# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IPTargetingListResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, advertiser_id: str=None, ip_targeting_data_name: str=None, ip_targeting_list_id: str=None, ip_targeting_ranges_count: int=None):  # noqa: E501
        """IPTargetingListResponse - a model defined in Swagger

        :param advertiser_id: The advertiser_id of this IPTargetingListResponse.  # noqa: E501
        :type advertiser_id: str
        :param ip_targeting_data_name: The ip_targeting_data_name of this IPTargetingListResponse.  # noqa: E501
        :type ip_targeting_data_name: str
        :param ip_targeting_list_id: The ip_targeting_list_id of this IPTargetingListResponse.  # noqa: E501
        :type ip_targeting_list_id: str
        :param ip_targeting_ranges_count: The ip_targeting_ranges_count of this IPTargetingListResponse.  # noqa: E501
        :type ip_targeting_ranges_count: int
        """
        self.swagger_types = {
            'advertiser_id': str,
            'ip_targeting_data_name': str,
            'ip_targeting_list_id': str,
            'ip_targeting_ranges_count': int
        }

        self.attribute_map = {
            'advertiser_id': 'AdvertiserId',
            'ip_targeting_data_name': 'IPTargetingDataName',
            'ip_targeting_list_id': 'IPTargetingListId',
            'ip_targeting_ranges_count': 'IPTargetingRangesCount'
        }
        self._advertiser_id = advertiser_id
        self._ip_targeting_data_name = ip_targeting_data_name
        self._ip_targeting_list_id = ip_targeting_list_id
        self._ip_targeting_ranges_count = ip_targeting_ranges_count

    @classmethod
    def from_dict(cls, dikt) -> 'IPTargetingListResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IPTargetingListResponse of this IPTargetingListResponse.  # noqa: E501
        :rtype: IPTargetingListResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self) -> str:
        """Gets the advertiser_id of this IPTargetingListResponse.

        The platform ID of the advertiser that owns this IP Targeting List.  # noqa: E501

        :return: The advertiser_id of this IPTargetingListResponse.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id: str):
        """Sets the advertiser_id of this IPTargetingListResponse.

        The platform ID of the advertiser that owns this IP Targeting List.  # noqa: E501

        :param advertiser_id: The advertiser_id of this IPTargetingListResponse.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def ip_targeting_data_name(self) -> str:
        """Gets the ip_targeting_data_name of this IPTargetingListResponse.

        The name of the Data Element to create for users who are in the associated IP targeting ranges.  # noqa: E501

        :return: The ip_targeting_data_name of this IPTargetingListResponse.
        :rtype: str
        """
        return self._ip_targeting_data_name

    @ip_targeting_data_name.setter
    def ip_targeting_data_name(self, ip_targeting_data_name: str):
        """Sets the ip_targeting_data_name of this IPTargetingListResponse.

        The name of the Data Element to create for users who are in the associated IP targeting ranges.  # noqa: E501

        :param ip_targeting_data_name: The ip_targeting_data_name of this IPTargetingListResponse.
        :type ip_targeting_data_name: str
        """

        self._ip_targeting_data_name = ip_targeting_data_name

    @property
    def ip_targeting_list_id(self) -> str:
        """Gets the ip_targeting_list_id of this IPTargetingListResponse.

        The ID of this IP Targeting List.  # noqa: E501

        :return: The ip_targeting_list_id of this IPTargetingListResponse.
        :rtype: str
        """
        return self._ip_targeting_list_id

    @ip_targeting_list_id.setter
    def ip_targeting_list_id(self, ip_targeting_list_id: str):
        """Sets the ip_targeting_list_id of this IPTargetingListResponse.

        The ID of this IP Targeting List.  # noqa: E501

        :param ip_targeting_list_id: The ip_targeting_list_id of this IPTargetingListResponse.
        :type ip_targeting_list_id: str
        """

        self._ip_targeting_list_id = ip_targeting_list_id

    @property
    def ip_targeting_ranges_count(self) -> int:
        """Gets the ip_targeting_ranges_count of this IPTargetingListResponse.

        The total number of IP targeting ranges currently used by the IP Targeting List.  # noqa: E501

        :return: The ip_targeting_ranges_count of this IPTargetingListResponse.
        :rtype: int
        """
        return self._ip_targeting_ranges_count

    @ip_targeting_ranges_count.setter
    def ip_targeting_ranges_count(self, ip_targeting_ranges_count: int):
        """Sets the ip_targeting_ranges_count of this IPTargetingListResponse.

        The total number of IP targeting ranges currently used by the IP Targeting List.  # noqa: E501

        :param ip_targeting_ranges_count: The ip_targeting_ranges_count of this IPTargetingListResponse.
        :type ip_targeting_ranges_count: int
        """

        self._ip_targeting_ranges_count = ip_targeting_ranges_count
