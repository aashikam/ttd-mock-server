# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.frequency_config_request_range import FrequencyConfigRequestRange  # noqa: F401,E501
from swagger_server import util


class FrequencyConfigRequestBidLines(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, range: FrequencyConfigRequestRange=None, bid_adjustment: float=None):  # noqa: E501
        """FrequencyConfigRequestBidLines - a model defined in Swagger

        :param range: The range of this FrequencyConfigRequestBidLines.  # noqa: E501
        :type range: FrequencyConfigRequestRange
        :param bid_adjustment: The bid_adjustment of this FrequencyConfigRequestBidLines.  # noqa: E501
        :type bid_adjustment: float
        """
        self.swagger_types = {
            'range': FrequencyConfigRequestRange,
            'bid_adjustment': float
        }

        self.attribute_map = {
            'range': 'Range',
            'bid_adjustment': 'BidAdjustment'
        }
        self._range = range
        self._bid_adjustment = bid_adjustment

    @classmethod
    def from_dict(cls, dikt) -> 'FrequencyConfigRequestBidLines':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FrequencyConfigRequest_BidLines of this FrequencyConfigRequestBidLines.  # noqa: E501
        :rtype: FrequencyConfigRequestBidLines
        """
        return util.deserialize_model(dikt, cls)

    @property
    def range(self) -> FrequencyConfigRequestRange:
        """Gets the range of this FrequencyConfigRequestBidLines.


        :return: The range of this FrequencyConfigRequestBidLines.
        :rtype: FrequencyConfigRequestRange
        """
        return self._range

    @range.setter
    def range(self, range: FrequencyConfigRequestRange):
        """Sets the range of this FrequencyConfigRequestBidLines.


        :param range: The range of this FrequencyConfigRequestBidLines.
        :type range: FrequencyConfigRequestRange
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501

        self._range = range

    @property
    def bid_adjustment(self) -> float:
        """Gets the bid_adjustment of this FrequencyConfigRequestBidLines.


        :return: The bid_adjustment of this FrequencyConfigRequestBidLines.
        :rtype: float
        """
        return self._bid_adjustment

    @bid_adjustment.setter
    def bid_adjustment(self, bid_adjustment: float):
        """Sets the bid_adjustment of this FrequencyConfigRequestBidLines.


        :param bid_adjustment: The bid_adjustment of this FrequencyConfigRequestBidLines.
        :type bid_adjustment: float
        """
        if bid_adjustment is None:
            raise ValueError("Invalid value for `bid_adjustment`, must not be `None`")  # noqa: E501

        self._bid_adjustment = bid_adjustment
