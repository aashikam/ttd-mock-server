# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ReportScheduleResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, report_schedule_id: int=None, report_schedule_name: str=None, advertiser_filters: List[str]=None, campaign_filters: List[str]=None, ad_group_filters: List[str]=None, partner_filters: List[str]=None, report_date_range: str=None, report_start_date_inclusive: datetime=None, report_end_date_exclusive: datetime=None, report_frequency: str=None, report_file_format: str=None, email_addresses: List[str]=None, time_zone: str=None, is_completed: bool=None, creation_date_utc: datetime=None):  # noqa: E501
        """ReportScheduleResponse - a model defined in Swagger

        :param report_schedule_id: The report_schedule_id of this ReportScheduleResponse.  # noqa: E501
        :type report_schedule_id: int
        :param report_schedule_name: The report_schedule_name of this ReportScheduleResponse.  # noqa: E501
        :type report_schedule_name: str
        :param advertiser_filters: The advertiser_filters of this ReportScheduleResponse.  # noqa: E501
        :type advertiser_filters: List[str]
        :param campaign_filters: The campaign_filters of this ReportScheduleResponse.  # noqa: E501
        :type campaign_filters: List[str]
        :param ad_group_filters: The ad_group_filters of this ReportScheduleResponse.  # noqa: E501
        :type ad_group_filters: List[str]
        :param partner_filters: The partner_filters of this ReportScheduleResponse.  # noqa: E501
        :type partner_filters: List[str]
        :param report_date_range: The report_date_range of this ReportScheduleResponse.  # noqa: E501
        :type report_date_range: str
        :param report_start_date_inclusive: The report_start_date_inclusive of this ReportScheduleResponse.  # noqa: E501
        :type report_start_date_inclusive: datetime
        :param report_end_date_exclusive: The report_end_date_exclusive of this ReportScheduleResponse.  # noqa: E501
        :type report_end_date_exclusive: datetime
        :param report_frequency: The report_frequency of this ReportScheduleResponse.  # noqa: E501
        :type report_frequency: str
        :param report_file_format: The report_file_format of this ReportScheduleResponse.  # noqa: E501
        :type report_file_format: str
        :param email_addresses: The email_addresses of this ReportScheduleResponse.  # noqa: E501
        :type email_addresses: List[str]
        :param time_zone: The time_zone of this ReportScheduleResponse.  # noqa: E501
        :type time_zone: str
        :param is_completed: The is_completed of this ReportScheduleResponse.  # noqa: E501
        :type is_completed: bool
        :param creation_date_utc: The creation_date_utc of this ReportScheduleResponse.  # noqa: E501
        :type creation_date_utc: datetime
        """
        self.swagger_types = {
            'report_schedule_id': int,
            'report_schedule_name': str,
            'advertiser_filters': List[str],
            'campaign_filters': List[str],
            'ad_group_filters': List[str],
            'partner_filters': List[str],
            'report_date_range': str,
            'report_start_date_inclusive': datetime,
            'report_end_date_exclusive': datetime,
            'report_frequency': str,
            'report_file_format': str,
            'email_addresses': List[str],
            'time_zone': str,
            'is_completed': bool,
            'creation_date_utc': datetime
        }

        self.attribute_map = {
            'report_schedule_id': 'ReportScheduleId',
            'report_schedule_name': 'ReportScheduleName',
            'advertiser_filters': 'AdvertiserFilters',
            'campaign_filters': 'CampaignFilters',
            'ad_group_filters': 'AdGroupFilters',
            'partner_filters': 'PartnerFilters',
            'report_date_range': 'ReportDateRange',
            'report_start_date_inclusive': 'ReportStartDateInclusive',
            'report_end_date_exclusive': 'ReportEndDateExclusive',
            'report_frequency': 'ReportFrequency',
            'report_file_format': 'ReportFileFormat',
            'email_addresses': 'EmailAddresses',
            'time_zone': 'TimeZone',
            'is_completed': 'IsCompleted',
            'creation_date_utc': 'CreationDateUtc'
        }
        self._report_schedule_id = report_schedule_id
        self._report_schedule_name = report_schedule_name
        self._advertiser_filters = advertiser_filters
        self._campaign_filters = campaign_filters
        self._ad_group_filters = ad_group_filters
        self._partner_filters = partner_filters
        self._report_date_range = report_date_range
        self._report_start_date_inclusive = report_start_date_inclusive
        self._report_end_date_exclusive = report_end_date_exclusive
        self._report_frequency = report_frequency
        self._report_file_format = report_file_format
        self._email_addresses = email_addresses
        self._time_zone = time_zone
        self._is_completed = is_completed
        self._creation_date_utc = creation_date_utc

    @classmethod
    def from_dict(cls, dikt) -> 'ReportScheduleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReportScheduleResponse of this ReportScheduleResponse.  # noqa: E501
        :rtype: ReportScheduleResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_schedule_id(self) -> int:
        """Gets the report_schedule_id of this ReportScheduleResponse.

        The ID of the Report Schedule.  # noqa: E501

        :return: The report_schedule_id of this ReportScheduleResponse.
        :rtype: int
        """
        return self._report_schedule_id

    @report_schedule_id.setter
    def report_schedule_id(self, report_schedule_id: int):
        """Sets the report_schedule_id of this ReportScheduleResponse.

        The ID of the Report Schedule.  # noqa: E501

        :param report_schedule_id: The report_schedule_id of this ReportScheduleResponse.
        :type report_schedule_id: int
        """

        self._report_schedule_id = report_schedule_id

    @property
    def report_schedule_name(self) -> str:
        """Gets the report_schedule_name of this ReportScheduleResponse.

        The name of the Report Schedule.  # noqa: E501

        :return: The report_schedule_name of this ReportScheduleResponse.
        :rtype: str
        """
        return self._report_schedule_name

    @report_schedule_name.setter
    def report_schedule_name(self, report_schedule_name: str):
        """Sets the report_schedule_name of this ReportScheduleResponse.

        The name of the Report Schedule.  # noqa: E501

        :param report_schedule_name: The report_schedule_name of this ReportScheduleResponse.
        :type report_schedule_name: str
        """

        self._report_schedule_name = report_schedule_name

    @property
    def advertiser_filters(self) -> List[str]:
        """Gets the advertiser_filters of this ReportScheduleResponse.

        The list of advertisers on which to filter the report.  # noqa: E501

        :return: The advertiser_filters of this ReportScheduleResponse.
        :rtype: List[str]
        """
        return self._advertiser_filters

    @advertiser_filters.setter
    def advertiser_filters(self, advertiser_filters: List[str]):
        """Sets the advertiser_filters of this ReportScheduleResponse.

        The list of advertisers on which to filter the report.  # noqa: E501

        :param advertiser_filters: The advertiser_filters of this ReportScheduleResponse.
        :type advertiser_filters: List[str]
        """

        self._advertiser_filters = advertiser_filters

    @property
    def campaign_filters(self) -> List[str]:
        """Gets the campaign_filters of this ReportScheduleResponse.

        The list of campaigns on which to filter the report.  # noqa: E501

        :return: The campaign_filters of this ReportScheduleResponse.
        :rtype: List[str]
        """
        return self._campaign_filters

    @campaign_filters.setter
    def campaign_filters(self, campaign_filters: List[str]):
        """Sets the campaign_filters of this ReportScheduleResponse.

        The list of campaigns on which to filter the report.  # noqa: E501

        :param campaign_filters: The campaign_filters of this ReportScheduleResponse.
        :type campaign_filters: List[str]
        """

        self._campaign_filters = campaign_filters

    @property
    def ad_group_filters(self) -> List[str]:
        """Gets the ad_group_filters of this ReportScheduleResponse.

        The list of ad groups on which to filter the report.  # noqa: E501

        :return: The ad_group_filters of this ReportScheduleResponse.
        :rtype: List[str]
        """
        return self._ad_group_filters

    @ad_group_filters.setter
    def ad_group_filters(self, ad_group_filters: List[str]):
        """Sets the ad_group_filters of this ReportScheduleResponse.

        The list of ad groups on which to filter the report.  # noqa: E501

        :param ad_group_filters: The ad_group_filters of this ReportScheduleResponse.
        :type ad_group_filters: List[str]
        """

        self._ad_group_filters = ad_group_filters

    @property
    def partner_filters(self) -> List[str]:
        """Gets the partner_filters of this ReportScheduleResponse.

        The list of partners on which to filter the report.  # noqa: E501

        :return: The partner_filters of this ReportScheduleResponse.
        :rtype: List[str]
        """
        return self._partner_filters

    @partner_filters.setter
    def partner_filters(self, partner_filters: List[str]):
        """Sets the partner_filters of this ReportScheduleResponse.

        The list of partners on which to filter the report.  # noqa: E501

        :param partner_filters: The partner_filters of this ReportScheduleResponse.
        :type partner_filters: List[str]
        """

        self._partner_filters = partner_filters

    @property
    def report_date_range(self) -> str:
        """Gets the report_date_range of this ReportScheduleResponse.

        The date range for the report schedule.  # noqa: E501

        :return: The report_date_range of this ReportScheduleResponse.
        :rtype: str
        """
        return self._report_date_range

    @report_date_range.setter
    def report_date_range(self, report_date_range: str):
        """Sets the report_date_range of this ReportScheduleResponse.

        The date range for the report schedule.  # noqa: E501

        :param report_date_range: The report_date_range of this ReportScheduleResponse.
        :type report_date_range: str
        """
        allowed_values = ["LastXDays", "Custom", "Yesterday", "Last7Days", "Last14Days", "Last30Days", "MonthToDate", "QuarterToDate", "YearToDate", "LastMonth", "LastQuarter", "Last3Months", "CampaignToDate"]  # noqa: E501
        if report_date_range not in allowed_values:
            raise ValueError(
                "Invalid value for `report_date_range` ({0}), must be one of {1}"
                .format(report_date_range, allowed_values)
            )

        self._report_date_range = report_date_range

    @property
    def report_start_date_inclusive(self) -> datetime:
        """Gets the report_start_date_inclusive of this ReportScheduleResponse.

        The start of the date range for the report.  # noqa: E501

        :return: The report_start_date_inclusive of this ReportScheduleResponse.
        :rtype: datetime
        """
        return self._report_start_date_inclusive

    @report_start_date_inclusive.setter
    def report_start_date_inclusive(self, report_start_date_inclusive: datetime):
        """Sets the report_start_date_inclusive of this ReportScheduleResponse.

        The start of the date range for the report.  # noqa: E501

        :param report_start_date_inclusive: The report_start_date_inclusive of this ReportScheduleResponse.
        :type report_start_date_inclusive: datetime
        """

        self._report_start_date_inclusive = report_start_date_inclusive

    @property
    def report_end_date_exclusive(self) -> datetime:
        """Gets the report_end_date_exclusive of this ReportScheduleResponse.

        The end of the date range for the report (exclusive).  # noqa: E501

        :return: The report_end_date_exclusive of this ReportScheduleResponse.
        :rtype: datetime
        """
        return self._report_end_date_exclusive

    @report_end_date_exclusive.setter
    def report_end_date_exclusive(self, report_end_date_exclusive: datetime):
        """Sets the report_end_date_exclusive of this ReportScheduleResponse.

        The end of the date range for the report (exclusive).  # noqa: E501

        :param report_end_date_exclusive: The report_end_date_exclusive of this ReportScheduleResponse.
        :type report_end_date_exclusive: datetime
        """

        self._report_end_date_exclusive = report_end_date_exclusive

    @property
    def report_frequency(self) -> str:
        """Gets the report_frequency of this ReportScheduleResponse.

        The frequency of the report schedule.  # noqa: E501

        :return: The report_frequency of this ReportScheduleResponse.
        :rtype: str
        """
        return self._report_frequency

    @report_frequency.setter
    def report_frequency(self, report_frequency: str):
        """Sets the report_frequency of this ReportScheduleResponse.

        The frequency of the report schedule.  # noqa: E501

        :param report_frequency: The report_frequency of this ReportScheduleResponse.
        :type report_frequency: str
        """
        allowed_values = ["Once", "Daily", "Weekly", "Monthly", "Quarterly"]  # noqa: E501
        if report_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `report_frequency` ({0}), must be one of {1}"
                .format(report_frequency, allowed_values)
            )

        self._report_frequency = report_frequency

    @property
    def report_file_format(self) -> str:
        """Gets the report_file_format of this ReportScheduleResponse.

        The file format for the report.  # noqa: E501

        :return: The report_file_format of this ReportScheduleResponse.
        :rtype: str
        """
        return self._report_file_format

    @report_file_format.setter
    def report_file_format(self, report_file_format: str):
        """Sets the report_file_format of this ReportScheduleResponse.

        The file format for the report.  # noqa: E501

        :param report_file_format: The report_file_format of this ReportScheduleResponse.
        :type report_file_format: str
        """
        allowed_values = ["TSV", "CSV", "ExcelPivot"]  # noqa: E501
        if report_file_format not in allowed_values:
            raise ValueError(
                "Invalid value for `report_file_format` ({0}), must be one of {1}"
                .format(report_file_format, allowed_values)
            )

        self._report_file_format = report_file_format

    @property
    def email_addresses(self) -> List[str]:
        """Gets the email_addresses of this ReportScheduleResponse.

        The list of email addresses that will receive the report.  # noqa: E501

        :return: The email_addresses of this ReportScheduleResponse.
        :rtype: List[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses: List[str]):
        """Sets the email_addresses of this ReportScheduleResponse.

        The list of email addresses that will receive the report.  # noqa: E501

        :param email_addresses: The email_addresses of this ReportScheduleResponse.
        :type email_addresses: List[str]
        """

        self._email_addresses = email_addresses

    @property
    def time_zone(self) -> str:
        """Gets the time_zone of this ReportScheduleResponse.

        The Olson timezone of the Report Schedule.  # noqa: E501

        :return: The time_zone of this ReportScheduleResponse.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone: str):
        """Sets the time_zone of this ReportScheduleResponse.

        The Olson timezone of the Report Schedule.  # noqa: E501

        :param time_zone: The time_zone of this ReportScheduleResponse.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def is_completed(self) -> bool:
        """Gets the is_completed of this ReportScheduleResponse.

        Indicates whether the report schedule has completed.  # noqa: E501

        :return: The is_completed of this ReportScheduleResponse.
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed: bool):
        """Sets the is_completed of this ReportScheduleResponse.

        Indicates whether the report schedule has completed.  # noqa: E501

        :param is_completed: The is_completed of this ReportScheduleResponse.
        :type is_completed: bool
        """

        self._is_completed = is_completed

    @property
    def creation_date_utc(self) -> datetime:
        """Gets the creation_date_utc of this ReportScheduleResponse.

        The UTC creation date of the Report Schedule.  # noqa: E501

        :return: The creation_date_utc of this ReportScheduleResponse.
        :rtype: datetime
        """
        return self._creation_date_utc

    @creation_date_utc.setter
    def creation_date_utc(self, creation_date_utc: datetime):
        """Sets the creation_date_utc of this ReportScheduleResponse.

        The UTC creation date of the Report Schedule.  # noqa: E501

        :param creation_date_utc: The creation_date_utc of this ReportScheduleResponse.
        :type creation_date_utc: datetime
        """

        self._creation_date_utc = creation_date_utc
