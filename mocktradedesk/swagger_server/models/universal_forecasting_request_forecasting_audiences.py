# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.universal_forecasting_request_included_data_groups import UniversalForecastingRequestIncludedDataGroups  # noqa: F401,E501
from swagger_server import util


class UniversalForecastingRequestForecastingAudiences(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, advertiser_id: str=None, audience_name: str=None, included_data_groups: List[UniversalForecastingRequestIncludedDataGroups]=None):  # noqa: E501
        """UniversalForecastingRequestForecastingAudiences - a model defined in Swagger

        :param advertiser_id: The advertiser_id of this UniversalForecastingRequestForecastingAudiences.  # noqa: E501
        :type advertiser_id: str
        :param audience_name: The audience_name of this UniversalForecastingRequestForecastingAudiences.  # noqa: E501
        :type audience_name: str
        :param included_data_groups: The included_data_groups of this UniversalForecastingRequestForecastingAudiences.  # noqa: E501
        :type included_data_groups: List[UniversalForecastingRequestIncludedDataGroups]
        """
        self.swagger_types = {
            'advertiser_id': str,
            'audience_name': str,
            'included_data_groups': List[UniversalForecastingRequestIncludedDataGroups]
        }

        self.attribute_map = {
            'advertiser_id': 'AdvertiserId',
            'audience_name': 'AudienceName',
            'included_data_groups': 'IncludedDataGroups'
        }
        self._advertiser_id = advertiser_id
        self._audience_name = audience_name
        self._included_data_groups = included_data_groups

    @classmethod
    def from_dict(cls, dikt) -> 'UniversalForecastingRequestForecastingAudiences':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UniversalForecastingRequest_ForecastingAudiences of this UniversalForecastingRequestForecastingAudiences.  # noqa: E501
        :rtype: UniversalForecastingRequestForecastingAudiences
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self) -> str:
        """Gets the advertiser_id of this UniversalForecastingRequestForecastingAudiences.

        The platform ID of the advertiser that owns this Audience.  # noqa: E501

        :return: The advertiser_id of this UniversalForecastingRequestForecastingAudiences.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id: str):
        """Sets the advertiser_id of this UniversalForecastingRequestForecastingAudiences.

        The platform ID of the advertiser that owns this Audience.  # noqa: E501

        :param advertiser_id: The advertiser_id of this UniversalForecastingRequestForecastingAudiences.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def audience_name(self) -> str:
        """Gets the audience_name of this UniversalForecastingRequestForecastingAudiences.

        The name of the audience.  # noqa: E501

        :return: The audience_name of this UniversalForecastingRequestForecastingAudiences.
        :rtype: str
        """
        return self._audience_name

    @audience_name.setter
    def audience_name(self, audience_name: str):
        """Sets the audience_name of this UniversalForecastingRequestForecastingAudiences.

        The name of the audience.  # noqa: E501

        :param audience_name: The audience_name of this UniversalForecastingRequestForecastingAudiences.
        :type audience_name: str
        """

        self._audience_name = audience_name

    @property
    def included_data_groups(self) -> List[UniversalForecastingRequestIncludedDataGroups]:
        """Gets the included_data_groups of this UniversalForecastingRequestForecastingAudiences.


        :return: The included_data_groups of this UniversalForecastingRequestForecastingAudiences.
        :rtype: List[UniversalForecastingRequestIncludedDataGroups]
        """
        return self._included_data_groups

    @included_data_groups.setter
    def included_data_groups(self, included_data_groups: List[UniversalForecastingRequestIncludedDataGroups]):
        """Sets the included_data_groups of this UniversalForecastingRequestForecastingAudiences.


        :param included_data_groups: The included_data_groups of this UniversalForecastingRequestForecastingAudiences.
        :type included_data_groups: List[UniversalForecastingRequestIncludedDataGroups]
        """

        self._included_data_groups = included_data_groups
