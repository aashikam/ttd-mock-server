# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.seller_query_request_sort_fields import SellerQueryRequestSortFields  # noqa: F401,E501
from swagger_server import util


class SellerQueryRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, page_size: int=None, page_start_index: int=None, included_seller_domains: List[str]=None, seller_name_filters: List[str]=None, seller_status_filter: str=None, sort_fields: List[SellerQueryRequestSortFields]=None):  # noqa: E501
        """SellerQueryRequest - a model defined in Swagger

        :param page_size: The page_size of this SellerQueryRequest.  # noqa: E501
        :type page_size: int
        :param page_start_index: The page_start_index of this SellerQueryRequest.  # noqa: E501
        :type page_start_index: int
        :param included_seller_domains: The included_seller_domains of this SellerQueryRequest.  # noqa: E501
        :type included_seller_domains: List[str]
        :param seller_name_filters: The seller_name_filters of this SellerQueryRequest.  # noqa: E501
        :type seller_name_filters: List[str]
        :param seller_status_filter: The seller_status_filter of this SellerQueryRequest.  # noqa: E501
        :type seller_status_filter: str
        :param sort_fields: The sort_fields of this SellerQueryRequest.  # noqa: E501
        :type sort_fields: List[SellerQueryRequestSortFields]
        """
        self.swagger_types = {
            'page_size': int,
            'page_start_index': int,
            'included_seller_domains': List[str],
            'seller_name_filters': List[str],
            'seller_status_filter': str,
            'sort_fields': List[SellerQueryRequestSortFields]
        }

        self.attribute_map = {
            'page_size': 'PageSize',
            'page_start_index': 'PageStartIndex',
            'included_seller_domains': 'IncludedSellerDomains',
            'seller_name_filters': 'SellerNameFilters',
            'seller_status_filter': 'SellerStatusFilter',
            'sort_fields': 'SortFields'
        }
        self._page_size = page_size
        self._page_start_index = page_start_index
        self._included_seller_domains = included_seller_domains
        self._seller_name_filters = seller_name_filters
        self._seller_status_filter = seller_status_filter
        self._sort_fields = sort_fields

    @classmethod
    def from_dict(cls, dikt) -> 'SellerQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SellerQueryRequest of this SellerQueryRequest.  # noqa: E501
        :rtype: SellerQueryRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_size(self) -> int:
        """Gets the page_size of this SellerQueryRequest.

        The size of the page requested. If there are fewer items on the current page than the PageSize, only those items will be returned. The minimum value is 25 and the maximum is 100.  # noqa: E501

        :return: The page_size of this SellerQueryRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size: int):
        """Sets the page_size of this SellerQueryRequest.

        The size of the page requested. If there are fewer items on the current page than the PageSize, only those items will be returned. The minimum value is 25 and the maximum is 100.  # noqa: E501

        :param page_size: The page_size of this SellerQueryRequest.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def page_start_index(self) -> int:
        """Gets the page_start_index of this SellerQueryRequest.

        The zero-based index at which to start the page of results.  # noqa: E501

        :return: The page_start_index of this SellerQueryRequest.
        :rtype: int
        """
        return self._page_start_index

    @page_start_index.setter
    def page_start_index(self, page_start_index: int):
        """Sets the page_start_index of this SellerQueryRequest.

        The zero-based index at which to start the page of results.  # noqa: E501

        :param page_start_index: The page_start_index of this SellerQueryRequest.
        :type page_start_index: int
        """
        if page_start_index is None:
            raise ValueError("Invalid value for `page_start_index`, must not be `None`")  # noqa: E501

        self._page_start_index = page_start_index

    @property
    def included_seller_domains(self) -> List[str]:
        """Gets the included_seller_domains of this SellerQueryRequest.

        Filter to a seller whose SellerDomain matches the value passed for this property.  # noqa: E501

        :return: The included_seller_domains of this SellerQueryRequest.
        :rtype: List[str]
        """
        return self._included_seller_domains

    @included_seller_domains.setter
    def included_seller_domains(self, included_seller_domains: List[str]):
        """Sets the included_seller_domains of this SellerQueryRequest.

        Filter to a seller whose SellerDomain matches the value passed for this property.  # noqa: E501

        :param included_seller_domains: The included_seller_domains of this SellerQueryRequest.
        :type included_seller_domains: List[str]
        """

        self._included_seller_domains = included_seller_domains

    @property
    def seller_name_filters(self) -> List[str]:
        """Gets the seller_name_filters of this SellerQueryRequest.

        Filter to a seller whose SellerName contains the value passed for this property.  # noqa: E501

        :return: The seller_name_filters of this SellerQueryRequest.
        :rtype: List[str]
        """
        return self._seller_name_filters

    @seller_name_filters.setter
    def seller_name_filters(self, seller_name_filters: List[str]):
        """Sets the seller_name_filters of this SellerQueryRequest.

        Filter to a seller whose SellerName contains the value passed for this property.  # noqa: E501

        :param seller_name_filters: The seller_name_filters of this SellerQueryRequest.
        :type seller_name_filters: List[str]
        """

        self._seller_name_filters = seller_name_filters

    @property
    def seller_status_filter(self) -> str:
        """Gets the seller_status_filter of this SellerQueryRequest.

        Filter to sellers whose SellerStatus matches the value specified. Defaults to Allowed.  # noqa: E501

        :return: The seller_status_filter of this SellerQueryRequest.
        :rtype: str
        """
        return self._seller_status_filter

    @seller_status_filter.setter
    def seller_status_filter(self, seller_status_filter: str):
        """Sets the seller_status_filter of this SellerQueryRequest.

        Filter to sellers whose SellerStatus matches the value specified. Defaults to Allowed.  # noqa: E501

        :param seller_status_filter: The seller_status_filter of this SellerQueryRequest.
        :type seller_status_filter: str
        """
        allowed_values = ["Allowed", "Disallowed"]  # noqa: E501
        if seller_status_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `seller_status_filter` ({0}), must be one of {1}"
                .format(seller_status_filter, allowed_values)
            )

        self._seller_status_filter = seller_status_filter

    @property
    def sort_fields(self) -> List[SellerQueryRequestSortFields]:
        """Gets the sort_fields of this SellerQueryRequest.

        Optionally, specify fields to sort the results by.  # noqa: E501

        :return: The sort_fields of this SellerQueryRequest.
        :rtype: List[SellerQueryRequestSortFields]
        """
        return self._sort_fields

    @sort_fields.setter
    def sort_fields(self, sort_fields: List[SellerQueryRequestSortFields]):
        """Sets the sort_fields of this SellerQueryRequest.

        Optionally, specify fields to sort the results by.  # noqa: E501

        :param sort_fields: The sort_fields of this SellerQueryRequest.
        :type sort_fields: List[SellerQueryRequestSortFields]
        """

        self._sort_fields = sort_fields
