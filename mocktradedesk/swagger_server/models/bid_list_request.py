# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.bid_list_request_bid_lines import BidListRequestBidLines  # noqa: F401,E501
from swagger_server import util


class BidListRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, bid_lines: List[BidListRequestBidLines]=None, resolution_type: str=None, bid_list_adjustment_type: str=None, bid_list_owner: str=None, name: str=None):  # noqa: E501
        """BidListRequest - a model defined in Swagger

        :param bid_lines: The bid_lines of this BidListRequest.  # noqa: E501
        :type bid_lines: List[BidListRequestBidLines]
        :param resolution_type: The resolution_type of this BidListRequest.  # noqa: E501
        :type resolution_type: str
        :param bid_list_adjustment_type: The bid_list_adjustment_type of this BidListRequest.  # noqa: E501
        :type bid_list_adjustment_type: str
        :param bid_list_owner: The bid_list_owner of this BidListRequest.  # noqa: E501
        :type bid_list_owner: str
        :param name: The name of this BidListRequest.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'bid_lines': List[BidListRequestBidLines],
            'resolution_type': str,
            'bid_list_adjustment_type': str,
            'bid_list_owner': str,
            'name': str
        }

        self.attribute_map = {
            'bid_lines': 'BidLines',
            'resolution_type': 'ResolutionType',
            'bid_list_adjustment_type': 'BidListAdjustmentType',
            'bid_list_owner': 'BidListOwner',
            'name': 'Name'
        }
        self._bid_lines = bid_lines
        self._resolution_type = resolution_type
        self._bid_list_adjustment_type = bid_list_adjustment_type
        self._bid_list_owner = bid_list_owner
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'BidListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BidListRequest of this BidListRequest.  # noqa: E501
        :rtype: BidListRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bid_lines(self) -> List[BidListRequestBidLines]:
        """Gets the bid_lines of this BidListRequest.

        The list of BidLines that will be used along with the ResolutionType to calculate the adjustment for this BidList.  # noqa: E501

        :return: The bid_lines of this BidListRequest.
        :rtype: List[BidListRequestBidLines]
        """
        return self._bid_lines

    @bid_lines.setter
    def bid_lines(self, bid_lines: List[BidListRequestBidLines]):
        """Sets the bid_lines of this BidListRequest.

        The list of BidLines that will be used along with the ResolutionType to calculate the adjustment for this BidList.  # noqa: E501

        :param bid_lines: The bid_lines of this BidListRequest.
        :type bid_lines: List[BidListRequestBidLines]
        """
        if bid_lines is None:
            raise ValueError("Invalid value for `bid_lines`, must not be `None`")  # noqa: E501

        self._bid_lines = bid_lines

    @property
    def resolution_type(self) -> str:
        """Gets the resolution_type of this BidListRequest.

        The ResolutionType determines how BidAdjustments are handled when an impression matches multiple BidLines.  # noqa: E501

        :return: The resolution_type of this BidListRequest.
        :rtype: str
        """
        return self._resolution_type

    @resolution_type.setter
    def resolution_type(self, resolution_type: str):
        """Sets the resolution_type of this BidListRequest.

        The ResolutionType determines how BidAdjustments are handled when an impression matches multiple BidLines.  # noqa: E501

        :param resolution_type: The resolution_type of this BidListRequest.
        :type resolution_type: str
        """
        allowed_values = ["ApplyMinimumAdjustment", "ApplyAverageAdjustment", "ApplyMaximumAdjustment", "ApplyMultiplyAdjustment"]  # noqa: E501
        if resolution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution_type` ({0}), must be one of {1}"
                .format(resolution_type, allowed_values)
            )

        self._resolution_type = resolution_type

    @property
    def bid_list_adjustment_type(self) -> str:
        """Gets the bid_list_adjustment_type of this BidListRequest.

        Defines how bid adjustments are applied (e.g., BlockList, TargetList, Optimized).  # noqa: E501

        :return: The bid_list_adjustment_type of this BidListRequest.
        :rtype: str
        """
        return self._bid_list_adjustment_type

    @bid_list_adjustment_type.setter
    def bid_list_adjustment_type(self, bid_list_adjustment_type: str):
        """Sets the bid_list_adjustment_type of this BidListRequest.

        Defines how bid adjustments are applied (e.g., BlockList, TargetList, Optimized).  # noqa: E501

        :param bid_list_adjustment_type: The bid_list_adjustment_type of this BidListRequest.
        :type bid_list_adjustment_type: str
        """
        allowed_values = ["BlockList", "TargetList", "Optimized"]  # noqa: E501
        if bid_list_adjustment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bid_list_adjustment_type` ({0}), must be one of {1}"
                .format(bid_list_adjustment_type, allowed_values)
            )

        self._bid_list_adjustment_type = bid_list_adjustment_type

    @property
    def bid_list_owner(self) -> str:
        """Gets the bid_list_owner of this BidListRequest.

        The type of owner that controls this bid list (e.g., AdGroup, Campaign, Advertiser).  # noqa: E501

        :return: The bid_list_owner of this BidListRequest.
        :rtype: str
        """
        return self._bid_list_owner

    @bid_list_owner.setter
    def bid_list_owner(self, bid_list_owner: str):
        """Sets the bid_list_owner of this BidListRequest.

        The type of owner that controls this bid list (e.g., AdGroup, Campaign, Advertiser).  # noqa: E501

        :param bid_list_owner: The bid_list_owner of this BidListRequest.
        :type bid_list_owner: str
        """

        self._bid_list_owner = bid_list_owner

    @property
    def name(self) -> str:
        """Gets the name of this BidListRequest.

        A name for the bid list.  # noqa: E501

        :return: The name of this BidListRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BidListRequest.

        A name for the bid list.  # noqa: E501

        :param name: The name of this BidListRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
