# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.frequency_config_request_bid_lines import FrequencyConfigRequestBidLines  # noqa: F401,E501
from swagger_server import util


class FrequencyConfigRequestBidLists(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, bid_lines: List[FrequencyConfigRequestBidLines]=None, volume_control_priority: str=None, associated_ad_groups: List[str]=None, associated_advertisers: List[str]=None, associated_campaigns: List[str]=None):  # noqa: E501
        """FrequencyConfigRequestBidLists - a model defined in Swagger

        :param bid_lines: The bid_lines of this FrequencyConfigRequestBidLists.  # noqa: E501
        :type bid_lines: List[FrequencyConfigRequestBidLines]
        :param volume_control_priority: The volume_control_priority of this FrequencyConfigRequestBidLists.  # noqa: E501
        :type volume_control_priority: str
        :param associated_ad_groups: The associated_ad_groups of this FrequencyConfigRequestBidLists.  # noqa: E501
        :type associated_ad_groups: List[str]
        :param associated_advertisers: The associated_advertisers of this FrequencyConfigRequestBidLists.  # noqa: E501
        :type associated_advertisers: List[str]
        :param associated_campaigns: The associated_campaigns of this FrequencyConfigRequestBidLists.  # noqa: E501
        :type associated_campaigns: List[str]
        """
        self.swagger_types = {
            'bid_lines': List[FrequencyConfigRequestBidLines],
            'volume_control_priority': str,
            'associated_ad_groups': List[str],
            'associated_advertisers': List[str],
            'associated_campaigns': List[str]
        }

        self.attribute_map = {
            'bid_lines': 'BidLines',
            'volume_control_priority': 'VolumeControlPriority',
            'associated_ad_groups': 'AssociatedAdGroups',
            'associated_advertisers': 'AssociatedAdvertisers',
            'associated_campaigns': 'AssociatedCampaigns'
        }
        self._bid_lines = bid_lines
        self._volume_control_priority = volume_control_priority
        self._associated_ad_groups = associated_ad_groups
        self._associated_advertisers = associated_advertisers
        self._associated_campaigns = associated_campaigns

    @classmethod
    def from_dict(cls, dikt) -> 'FrequencyConfigRequestBidLists':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FrequencyConfigRequest_BidLists of this FrequencyConfigRequestBidLists.  # noqa: E501
        :rtype: FrequencyConfigRequestBidLists
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bid_lines(self) -> List[FrequencyConfigRequestBidLines]:
        """Gets the bid_lines of this FrequencyConfigRequestBidLists.

        A list of frequency bid lines that are used to calculate the adjustment.  # noqa: E501

        :return: The bid_lines of this FrequencyConfigRequestBidLists.
        :rtype: List[FrequencyConfigRequestBidLines]
        """
        return self._bid_lines

    @bid_lines.setter
    def bid_lines(self, bid_lines: List[FrequencyConfigRequestBidLines]):
        """Sets the bid_lines of this FrequencyConfigRequestBidLists.

        A list of frequency bid lines that are used to calculate the adjustment.  # noqa: E501

        :param bid_lines: The bid_lines of this FrequencyConfigRequestBidLists.
        :type bid_lines: List[FrequencyConfigRequestBidLines]
        """

        self._bid_lines = bid_lines

    @property
    def volume_control_priority(self) -> str:
        """Gets the volume_control_priority of this FrequencyConfigRequestBidLists.

        The volume control priority applied to the adjustment.  # noqa: E501

        :return: The volume_control_priority of this FrequencyConfigRequestBidLists.
        :rtype: str
        """
        return self._volume_control_priority

    @volume_control_priority.setter
    def volume_control_priority(self, volume_control_priority: str):
        """Sets the volume_control_priority of this FrequencyConfigRequestBidLists.

        The volume control priority applied to the adjustment.  # noqa: E501

        :param volume_control_priority: The volume_control_priority of this FrequencyConfigRequestBidLists.
        :type volume_control_priority: str
        """
        allowed_values = ["Neutral", "One", "Two", "FrequencyGoal", "Negative"]  # noqa: E501
        if volume_control_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_control_priority` ({0}), must be one of {1}"
                .format(volume_control_priority, allowed_values)
            )

        self._volume_control_priority = volume_control_priority

    @property
    def associated_ad_groups(self) -> List[str]:
        """Gets the associated_ad_groups of this FrequencyConfigRequestBidLists.

        A list of IDs of ad groups where the bid list is associated and enabled.  # noqa: E501

        :return: The associated_ad_groups of this FrequencyConfigRequestBidLists.
        :rtype: List[str]
        """
        return self._associated_ad_groups

    @associated_ad_groups.setter
    def associated_ad_groups(self, associated_ad_groups: List[str]):
        """Sets the associated_ad_groups of this FrequencyConfigRequestBidLists.

        A list of IDs of ad groups where the bid list is associated and enabled.  # noqa: E501

        :param associated_ad_groups: The associated_ad_groups of this FrequencyConfigRequestBidLists.
        :type associated_ad_groups: List[str]
        """

        self._associated_ad_groups = associated_ad_groups

    @property
    def associated_advertisers(self) -> List[str]:
        """Gets the associated_advertisers of this FrequencyConfigRequestBidLists.

        A list of IDs of advertisers where the bid list is associated and enabled.  # noqa: E501

        :return: The associated_advertisers of this FrequencyConfigRequestBidLists.
        :rtype: List[str]
        """
        return self._associated_advertisers

    @associated_advertisers.setter
    def associated_advertisers(self, associated_advertisers: List[str]):
        """Sets the associated_advertisers of this FrequencyConfigRequestBidLists.

        A list of IDs of advertisers where the bid list is associated and enabled.  # noqa: E501

        :param associated_advertisers: The associated_advertisers of this FrequencyConfigRequestBidLists.
        :type associated_advertisers: List[str]
        """

        self._associated_advertisers = associated_advertisers

    @property
    def associated_campaigns(self) -> List[str]:
        """Gets the associated_campaigns of this FrequencyConfigRequestBidLists.

        A list of IDs of campaigns where the bid list is associated and enabled.  # noqa: E501

        :return: The associated_campaigns of this FrequencyConfigRequestBidLists.
        :rtype: List[str]
        """
        return self._associated_campaigns

    @associated_campaigns.setter
    def associated_campaigns(self, associated_campaigns: List[str]):
        """Sets the associated_campaigns of this FrequencyConfigRequestBidLists.

        A list of IDs of campaigns where the bid list is associated and enabled.  # noqa: E501

        :param associated_campaigns: The associated_campaigns of this FrequencyConfigRequestBidLists.
        :type associated_campaigns: List[str]
        """

        self._associated_campaigns = associated_campaigns
