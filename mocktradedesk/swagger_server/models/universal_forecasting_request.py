# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.universal_forecasting_request_demographic import UniversalForecastingRequestDemographic  # noqa: F401,E501
from swagger_server.models.universal_forecasting_request_forecasting_audiences import UniversalForecastingRequestForecastingAudiences  # noqa: F401,E501
from swagger_server.models.universal_forecasting_request_universal_forecasting_bid_lists import UniversalForecastingRequestUniversalForecastingBidLists  # noqa: F401,E501
from swagger_server import util


class UniversalForecastingRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, advertiser_id: str=None, audience_id: str=None, average_bid_cpmin_advertiser_currency: float=None, demographic: UniversalForecastingRequestDemographic=None, existing_bid_lists: List[int]=None, forecasting_audiences: List[UniversalForecastingRequestForecastingAudiences]=None, generate_budget_points: bool=None, time_window: int=None, universal_forecasting_bid_lists: List[UniversalForecastingRequestUniversalForecastingBidLists]=None):  # noqa: E501
        """UniversalForecastingRequest - a model defined in Swagger

        :param advertiser_id: The advertiser_id of this UniversalForecastingRequest.  # noqa: E501
        :type advertiser_id: str
        :param audience_id: The audience_id of this UniversalForecastingRequest.  # noqa: E501
        :type audience_id: str
        :param average_bid_cpmin_advertiser_currency: The average_bid_cpmin_advertiser_currency of this UniversalForecastingRequest.  # noqa: E501
        :type average_bid_cpmin_advertiser_currency: float
        :param demographic: The demographic of this UniversalForecastingRequest.  # noqa: E501
        :type demographic: UniversalForecastingRequestDemographic
        :param existing_bid_lists: The existing_bid_lists of this UniversalForecastingRequest.  # noqa: E501
        :type existing_bid_lists: List[int]
        :param forecasting_audiences: The forecasting_audiences of this UniversalForecastingRequest.  # noqa: E501
        :type forecasting_audiences: List[UniversalForecastingRequestForecastingAudiences]
        :param generate_budget_points: The generate_budget_points of this UniversalForecastingRequest.  # noqa: E501
        :type generate_budget_points: bool
        :param time_window: The time_window of this UniversalForecastingRequest.  # noqa: E501
        :type time_window: int
        :param universal_forecasting_bid_lists: The universal_forecasting_bid_lists of this UniversalForecastingRequest.  # noqa: E501
        :type universal_forecasting_bid_lists: List[UniversalForecastingRequestUniversalForecastingBidLists]
        """
        self.swagger_types = {
            'advertiser_id': str,
            'audience_id': str,
            'average_bid_cpmin_advertiser_currency': float,
            'demographic': UniversalForecastingRequestDemographic,
            'existing_bid_lists': List[int],
            'forecasting_audiences': List[UniversalForecastingRequestForecastingAudiences],
            'generate_budget_points': bool,
            'time_window': int,
            'universal_forecasting_bid_lists': List[UniversalForecastingRequestUniversalForecastingBidLists]
        }

        self.attribute_map = {
            'advertiser_id': 'AdvertiserId',
            'audience_id': 'AudienceId',
            'average_bid_cpmin_advertiser_currency': 'AverageBidCPMInAdvertiserCurrency',
            'demographic': 'Demographic',
            'existing_bid_lists': 'ExistingBidLists',
            'forecasting_audiences': 'ForecastingAudiences',
            'generate_budget_points': 'GenerateBudgetPoints',
            'time_window': 'TimeWindow',
            'universal_forecasting_bid_lists': 'UniversalForecastingBidLists'
        }
        self._advertiser_id = advertiser_id
        self._audience_id = audience_id
        self._average_bid_cpmin_advertiser_currency = average_bid_cpmin_advertiser_currency
        self._demographic = demographic
        self._existing_bid_lists = existing_bid_lists
        self._forecasting_audiences = forecasting_audiences
        self._generate_budget_points = generate_budget_points
        self._time_window = time_window
        self._universal_forecasting_bid_lists = universal_forecasting_bid_lists

    @classmethod
    def from_dict(cls, dikt) -> 'UniversalForecastingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UniversalForecastingRequest of this UniversalForecastingRequest.  # noqa: E501
        :rtype: UniversalForecastingRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self) -> str:
        """Gets the advertiser_id of this UniversalForecastingRequest.

        The platform ID of the advertiser requesting the forecast.  # noqa: E501

        :return: The advertiser_id of this UniversalForecastingRequest.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id: str):
        """Sets the advertiser_id of this UniversalForecastingRequest.

        The platform ID of the advertiser requesting the forecast.  # noqa: E501

        :param advertiser_id: The advertiser_id of this UniversalForecastingRequest.
        :type advertiser_id: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def audience_id(self) -> str:
        """Gets the audience_id of this UniversalForecastingRequest.

        The ID for the audience to be used in the forecast.  # noqa: E501

        :return: The audience_id of this UniversalForecastingRequest.
        :rtype: str
        """
        return self._audience_id

    @audience_id.setter
    def audience_id(self, audience_id: str):
        """Sets the audience_id of this UniversalForecastingRequest.

        The ID for the audience to be used in the forecast.  # noqa: E501

        :param audience_id: The audience_id of this UniversalForecastingRequest.
        :type audience_id: str
        """

        self._audience_id = audience_id

    @property
    def average_bid_cpmin_advertiser_currency(self) -> float:
        """Gets the average_bid_cpmin_advertiser_currency of this UniversalForecastingRequest.

        The average bid in the advertiser's currency to be used for the forecast.  # noqa: E501

        :return: The average_bid_cpmin_advertiser_currency of this UniversalForecastingRequest.
        :rtype: float
        """
        return self._average_bid_cpmin_advertiser_currency

    @average_bid_cpmin_advertiser_currency.setter
    def average_bid_cpmin_advertiser_currency(self, average_bid_cpmin_advertiser_currency: float):
        """Sets the average_bid_cpmin_advertiser_currency of this UniversalForecastingRequest.

        The average bid in the advertiser's currency to be used for the forecast.  # noqa: E501

        :param average_bid_cpmin_advertiser_currency: The average_bid_cpmin_advertiser_currency of this UniversalForecastingRequest.
        :type average_bid_cpmin_advertiser_currency: float
        """

        self._average_bid_cpmin_advertiser_currency = average_bid_cpmin_advertiser_currency

    @property
    def demographic(self) -> UniversalForecastingRequestDemographic:
        """Gets the demographic of this UniversalForecastingRequest.


        :return: The demographic of this UniversalForecastingRequest.
        :rtype: UniversalForecastingRequestDemographic
        """
        return self._demographic

    @demographic.setter
    def demographic(self, demographic: UniversalForecastingRequestDemographic):
        """Sets the demographic of this UniversalForecastingRequest.


        :param demographic: The demographic of this UniversalForecastingRequest.
        :type demographic: UniversalForecastingRequestDemographic
        """

        self._demographic = demographic

    @property
    def existing_bid_lists(self) -> List[int]:
        """Gets the existing_bid_lists of this UniversalForecastingRequest.

        Existing bid lists to be applied to the forecast.  # noqa: E501

        :return: The existing_bid_lists of this UniversalForecastingRequest.
        :rtype: List[int]
        """
        return self._existing_bid_lists

    @existing_bid_lists.setter
    def existing_bid_lists(self, existing_bid_lists: List[int]):
        """Sets the existing_bid_lists of this UniversalForecastingRequest.

        Existing bid lists to be applied to the forecast.  # noqa: E501

        :param existing_bid_lists: The existing_bid_lists of this UniversalForecastingRequest.
        :type existing_bid_lists: List[int]
        """

        self._existing_bid_lists = existing_bid_lists

    @property
    def forecasting_audiences(self) -> List[UniversalForecastingRequestForecastingAudiences]:
        """Gets the forecasting_audiences of this UniversalForecastingRequest.


        :return: The forecasting_audiences of this UniversalForecastingRequest.
        :rtype: List[UniversalForecastingRequestForecastingAudiences]
        """
        return self._forecasting_audiences

    @forecasting_audiences.setter
    def forecasting_audiences(self, forecasting_audiences: List[UniversalForecastingRequestForecastingAudiences]):
        """Sets the forecasting_audiences of this UniversalForecastingRequest.


        :param forecasting_audiences: The forecasting_audiences of this UniversalForecastingRequest.
        :type forecasting_audiences: List[UniversalForecastingRequestForecastingAudiences]
        """

        self._forecasting_audiences = forecasting_audiences

    @property
    def generate_budget_points(self) -> bool:
        """Gets the generate_budget_points of this UniversalForecastingRequest.

        Set to true to generate budget points for impressions and reach.  # noqa: E501

        :return: The generate_budget_points of this UniversalForecastingRequest.
        :rtype: bool
        """
        return self._generate_budget_points

    @generate_budget_points.setter
    def generate_budget_points(self, generate_budget_points: bool):
        """Sets the generate_budget_points of this UniversalForecastingRequest.

        Set to true to generate budget points for impressions and reach.  # noqa: E501

        :param generate_budget_points: The generate_budget_points of this UniversalForecastingRequest.
        :type generate_budget_points: bool
        """
        if generate_budget_points is None:
            raise ValueError("Invalid value for `generate_budget_points`, must not be `None`")  # noqa: E501

        self._generate_budget_points = generate_budget_points

    @property
    def time_window(self) -> int:
        """Gets the time_window of this UniversalForecastingRequest.

        The number of days (1 to 180) for the forecast.  # noqa: E501

        :return: The time_window of this UniversalForecastingRequest.
        :rtype: int
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window: int):
        """Sets the time_window of this UniversalForecastingRequest.

        The number of days (1 to 180) for the forecast.  # noqa: E501

        :param time_window: The time_window of this UniversalForecastingRequest.
        :type time_window: int
        """

        self._time_window = time_window

    @property
    def universal_forecasting_bid_lists(self) -> List[UniversalForecastingRequestUniversalForecastingBidLists]:
        """Gets the universal_forecasting_bid_lists of this UniversalForecastingRequest.

        New bid lists to be applied to the forecast.  # noqa: E501

        :return: The universal_forecasting_bid_lists of this UniversalForecastingRequest.
        :rtype: List[UniversalForecastingRequestUniversalForecastingBidLists]
        """
        return self._universal_forecasting_bid_lists

    @universal_forecasting_bid_lists.setter
    def universal_forecasting_bid_lists(self, universal_forecasting_bid_lists: List[UniversalForecastingRequestUniversalForecastingBidLists]):
        """Sets the universal_forecasting_bid_lists of this UniversalForecastingRequest.

        New bid lists to be applied to the forecast.  # noqa: E501

        :param universal_forecasting_bid_lists: The universal_forecasting_bid_lists of this UniversalForecastingRequest.
        :type universal_forecasting_bid_lists: List[UniversalForecastingRequestUniversalForecastingBidLists]
        """

        self._universal_forecasting_bid_lists = universal_forecasting_bid_lists
