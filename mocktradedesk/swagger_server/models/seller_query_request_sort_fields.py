# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SellerQueryRequestSortFields(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, field_id: str=None, ascending: bool=None):  # noqa: E501
        """SellerQueryRequestSortFields - a model defined in Swagger

        :param field_id: The field_id of this SellerQueryRequestSortFields.  # noqa: E501
        :type field_id: str
        :param ascending: The ascending of this SellerQueryRequestSortFields.  # noqa: E501
        :type ascending: bool
        """
        self.swagger_types = {
            'field_id': str,
            'ascending': bool
        }

        self.attribute_map = {
            'field_id': 'FieldId',
            'ascending': 'Ascending'
        }
        self._field_id = field_id
        self._ascending = ascending

    @classmethod
    def from_dict(cls, dikt) -> 'SellerQueryRequestSortFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SellerQueryRequest_SortFields of this SellerQueryRequestSortFields.  # noqa: E501
        :rtype: SellerQueryRequestSortFields
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_id(self) -> str:
        """Gets the field_id of this SellerQueryRequestSortFields.

        The field ID by which to sort.  # noqa: E501

        :return: The field_id of this SellerQueryRequestSortFields.
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id: str):
        """Sets the field_id of this SellerQueryRequestSortFields.

        The field ID by which to sort.  # noqa: E501

        :param field_id: The field_id of this SellerQueryRequestSortFields.
        :type field_id: str
        """
        allowed_values = ["SellerName", "SellerDomain"]  # noqa: E501
        if field_id not in allowed_values:
            raise ValueError(
                "Invalid value for `field_id` ({0}), must be one of {1}"
                .format(field_id, allowed_values)
            )

        self._field_id = field_id

    @property
    def ascending(self) -> bool:
        """Gets the ascending of this SellerQueryRequestSortFields.

        Whether to sort this field in ascending order (true) or descending order (false). Defaults to true.  # noqa: E501

        :return: The ascending of this SellerQueryRequestSortFields.
        :rtype: bool
        """
        return self._ascending

    @ascending.setter
    def ascending(self, ascending: bool):
        """Sets the ascending of this SellerQueryRequestSortFields.

        Whether to sort this field in ascending order (true) or descending order (false). Defaults to true.  # noqa: E501

        :param ascending: The ascending of this SellerQueryRequestSortFields.
        :type ascending: bool
        """

        self._ascending = ascending
